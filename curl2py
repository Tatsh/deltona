#!/usr/bin/env python

# NOTE This is for Python 3 only for the moment.

from base64 import b64encode
from getpass import getpass
import argparse
import sys

try:
    from urllib.parse import urlparse
    from urllib.request import urlopen, Request
except ImportError:
    from urllib2 import urlopen, Request
    from urlparse import urlparse


class CollectHeaders(argparse.Action):
    def __call__(self, parser, namespace, values, option_strings=None):
        pieces = list(map(str.strip, values.split(':')))

        if pieces[0].lower() == 'accept-encoding':
            return

        headers[pieces[0]] = pieces[1]


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Generate equivalent Python code'
                                    ' for cURL command')

    parser.add_argument('-H', '--header', help='Header', dest='header',
                        action=CollectHeaders)
    parser.add_argument('--data', default=False, help='POST data')
    parser.add_argument('--compressed', default=False,
                        action='store_true', help='Ignored')

    parser.add_argument('-X', '--request', help='Request type', default='GET')
    parser.add_argument('-u', '--user', help='User name for authentication')
    parser.add_argument('-p', '--password')
    parser.add_argument('--user-agent', help='User agent')
    parser.add_argument('--basic', help='Basic authentication', action='store_true')

    argv = sys.argv
    headers = {}

    # Chrome puts URL first unfortunately; detect that
    first_is_url = False
    url = False
    try:
        parsed_dict = urlparse(argv[1])
        first_is_url = parsed_dict.netloc != ''
        url = argv[1]
    except IndexError:
        sys.exit(1)

    if first_is_url:
        argv = argv[2:]
    else:
        parser.add_argument('url', metavar='URL', help='URL to fetch', nargs=1)

    options = parser.parse_args(argv)
    post_data = options.data
    passwd = options.password

    if url is False:
        url = options.url

    if options.basic and not options.user:
        print('User name is required if using --basic')
        sys.exit(1)

    if options.user and not passwd:
        passwd = getpass()

    if options.basic and options.user and passwd:
        userpw = b64encode(bytes('%s:%s' % (options.user, passwd,), encoding='utf8'))
        headers['Auth'] = 'Basic: %s' % (userpw.decode('utf-8'),)

    method = options.request.upper()

    # Generation of code starts here
    print("""#!/usr/bin/env python
try:
    from urllib.request import urlopen, Request
except ImportError:
    from urllib2 import urlopen, Request

headers = %(headers)s""" % {'headers': headers})

    if post_data is not False:
        print('req = Request("%(url)s", "%(post_data)s".encode(\'utf-8\'),'
            ' headers, method=\'%(method)s\')' % {'url': url, 'post_data': post_data, 'method': method})
    else:
        print('req = Request("%(url)s", None, headers)' % {'url': url})

    print("""response = urlopen(req)
content = response.read()
content = content.decode('utf-8')
print(content)""")
