#!/usr/bin/env python
# This is based on calcbpp which comes with mplayer tools
from math import floor
from typing import List, Union, cast
import argparse
import sys


def main() -> int:
    parser = argparse.ArgumentParser(description='Calculates bits per pixel')
    parser.add_argument('unscaled_resolution',
                        metavar='UNSCALED_RES',
                        help='Unscaled resolution in X:Y format')
    parser.add_argument('aspect_ratio',
                        metavar='AR',
                        help='Aspect ratio in X:Y format')
    parser.add_argument('video_bitrate',
                        metavar='VIDEO_BITRATE',
                        help='Video bitrate in bps')
    parser.add_argument('fps', metavar='FPS', help='Frames per second')
    parser.add_argument('-r',
                        '--raw-ar',
                        metavar='RAW_AR',
                        default='720:480',
                        help='Raw aspect ratio in X:Y format')
    args = parser.parse_args()
    unscaled_width, unscaled_height = args.unscaled_resolution.split(':')
    raw_aspect_width, raw_aspect_height = [
        int(x) for x in args.raw_ar.split(':')
    ]
    bps, fps = (
        args.video_bitrate,
        args.fps,
    )
    raw_aspect: float = raw_aspect_width / raw_aspect_height
    encoded_at: Union[str, List[int], float] = args.aspect_ratio
    if ':' in cast(str, encoded_at):
        encoded_at = [int(x) for x in cast(str, encoded_at).split(':')]
        encoded_at = encoded_at[0] / encoded_at[1]
    scaled_width = float(unscaled_width) * (cast(float, encoded_at) /
                                            raw_aspect)
    scaled_height: str = unscaled_height
    picture_ar = float(scaled_width) / float(scaled_height)
    print(f'Prescaled picture: {int(scaled_width):d}x{int(scaled_height):d}, '
          f'AR {float(picture_ar):.2f}')
    width = 720
    while width >= 320:
        height = 16 * round(width / picture_ar / 16)
        diff = width / picture_ar - height
        if diff < 0 and diff % 0.5 == 0:
            diff = floor(diff) + 1
        else:
            diff = round(diff)
        new_ar = width / height
        picture_ar_error: float = abs(100 - picture_ar / new_ar * 100)
        bpp: float = (int(bps) * 1000) / (width * height * float(fps))
        print(f'{width:d}x{height:d}, diff {diff:3d}, new AR {new_ar:.2f}, '
              f'AR error {picture_ar_error:.2f}%, '
              f'scale={width:d}:{height:d} bpp: {bpp:.3f}')
        width -= 16
    return 0


if __name__ == '__main__':
    sys.exit(main())
