#!/usr/bin/env python
from os import stat, unlink, utime
from os.path import (basename, isdir, isfile, join as path_join, realpath,
                     splitext)
from typing import Optional
import argparse
import sys


def safe_rename(fn: str, target: str, preserve: bool):
    if not isfile(target) and not isdir(target):
        print(f'copy {fn} -> {target}', file=sys.stderr)
        with open(target, 'wb+') as f:
            with open(fn, 'rb') as o:
                f.write(o.read())
            if preserve:
                s = stat(fn)
                utime(target, (
                    s.st_atime,
                    s.st_mtime,
                ))
        return True
    if isdir(target):
        target = path_join(target, basename(fn))
        return safe_rename(fn, target, preserve)
    renamed = False
    n = 1
    while not renamed:
        bfn, ext = splitext(target)
        while isfile(target):
            suffix = '-{:d}'.format(n)
            last = ext if ext else ''
            target = f'{bfn}{suffix}{last}'
            n += 1
        renamed = safe_rename(fn, target, preserve)
        n += 1
    return renamed


def main() -> int:
    is_mv = sys.argv[0].endswith('safemv')
    help_ = 'Copy files without clobbering existing files'
    if is_mv:
        help_ = 'Move {}'.format(help_[5:])
    parser = argparse.ArgumentParser(help_)
    parser.add_argument('-t',
                        '--target-dir',
                        metavar='TARGET_DIR',
                        help='Target directory (for use with xargs)')
    parser.add_argument('--no-preserve', action='store_true')
    parser.add_argument('files', nargs='*')
    args = parser.parse_args()
    target: Optional[str] = args.target_dir
    if target:
        target = realpath(target)
        if not isdir(target):
            print(f'TARGET_DIR argument must be a directory, given: {target}',
                  file=sys.stderr)
            return 1
    else:
        if len(args.files) < 2:
            print('Must have file to move and target argument',
                  file=sys.stderr)
            return 1
        should_be_dir_last = len(args.files) > 2
        target = realpath(args.files.pop())
        assert target is not None
        if should_be_dir_last and not isdir(target):
            print(
                'Last argument must be a directory if specifying more than '
                '2 files to move',
                file=sys.stderr)
            return 1
    args.files = (realpath(x) for x in args.files)
    fn: str
    for fn in args.files:
        if not safe_rename(fn, target, not args.no_preserve):
            raise RuntimeError('Unexpected error')
    if is_mv:
        for fn in args.files:
            unlink(fn)
    return 0


if __name__ == '__main__':
    sys.exit(main())
