#!/usr/bin/env python
from functools import lru_cache
from os.path import basename
from pathlib import Path
from typing import Dict, Optional
import logging
import plistlib
import sys

from typing_extensions import Final

HIGH_RES_KEY: Final = 'NSHighResolutionCapable'


@lru_cache()
def setup_logging_stdout(name: Optional[str] = None,
                         verbose: bool = False) -> logging.Logger:
    name = name if name else basename(sys.argv[0])
    log: Final = logging.getLogger(name)
    log.setLevel(logging.DEBUG if verbose else logging.INFO)
    channel: Final = logging.StreamHandler(sys.stdout)
    channel.setFormatter(logging.Formatter('%(message)s'))
    channel.setLevel(logging.DEBUG if verbose else logging.INFO)
    log.addHandler(channel)
    return log


def main() -> int:
    log: Final = setup_logging_stdout()
    for fin in sys.argv[1:]:
        p = Path(fin).joinpath('Contents', 'Info.plist')
        if not p.exists():
            log.warning('Skipping %s (Info.plist not found)', fin)
            continue
        with p.open('rb') as f:
            data: Dict[str, bool] = plistlib.load(f)
            data[HIGH_RES_KEY] = True
        with p.open('wb') as f:
            plistlib.dump(data, f, sort_keys=False)
        log.info('Rewrote Info.plist for %s', fin)
        log.debug('Running `touch "%s"`', fin)
        Path(fin).touch()
    return 0


if __name__ == '__main__':
    sys.exit(main())
