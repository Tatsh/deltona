[build-system]
build-backend = "poetry.core.masonry.api"
requires = ["poetry-core"]

[tool]

[tool.commitizen]
tag_format = "v$version"
version_files = [".project.jsonnet", "CITATION.cff", "README.md", "package.json"]
version_provider = "poetry"

[tool.coverage]

[tool.coverage.report]
omit = ["conftest.py", "tests.py", "tests/test_*.py"]
show_missing = true

[tool.coverage.run]
branch = true
omit = ["conftest.py", "tests.py", "tests/test_*.py"]

[tool.doc8]
max-line-length = 100

[tool.mypy]
cache_dir = "~/.cache/mypy"
explicit_package_bases = true
platform = "linux"
python_version = "3.12"
show_column_numbers = true
strict = true
strict_optional = true
warn_unreachable = true

[tool.poetry]
authors = ["Andrew Udvare <audvare@gmail.com>"]
classifiers = [
  "Development Status :: 2 - Pre-Alpha",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: MIT License",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.12",
  "Typing :: Typed",
]
description = "Core library used by my tools."
documentation = "https://deltona.readthedocs.org"
homepage = "https://github.com/Tatsh/deltona"
keywords = ["command line", "library", "media"]
license = "MIT"
name = "deltona"
readme = "README.md"
repository = "https://github.com/Tatsh/deltona"
version = "0.0.1"

[tool.poetry.dependencies]
beautifulsoup4 = "^4.13.3"
binaryornot = "^0.4.4"
click = "^8.1.8"
html5lib = "^1.1"
keyring = "^25.6.0"
mutagen = "^1.47.0"
pexpect = "^4.9.0"
pillow = { optional = true, version = "^11.1.0" }
platformdirs = "^4.3.8"
psutil = { version = "^7.0.0", optional = true }
pydbus-stubs = { git = "ssh://git@github.com/Tatsh/pydbus-stubs.git" }
pyperclip = "^1.9.0"
python = ">=3.12,<3.13"
python-xz = "^0.5.0"
pyyaml = "^6.0.2"
requests = "^2.32.3"
send2trash = "^1.8.3"
types-binaryornot = "^0.4.0.20250507"
yt-dlp = "^2025.3.25"

[tool.poetry.dependencies.gitpython]
optional = true
version = "^3.1.44"

[tool.poetry.dependencies.paramiko]
optional = true
version = "^3.5.1"

[tool.poetry.dependencies.pydbus]
platform = "linux"
version = "^0.6.0"

[tool.poetry.dependencies.pygithub]
optional = true
version = "^2.6.1"

[tool.poetry.dependencies.unidecode]
optional = true
version = "^1.3.8"

[tool.poetry.extras]
chrome = ["pillow"]
gamescope = ["psutil"]
git = ["gitpython", "pygithub"]
ssh = ["paramiko"]
unidecode = ["unidecode"]

[tool.poetry.group]

[tool.poetry.group.dev]
optional = true

[tool.poetry.group.dev.dependencies]
cffconvert = "^2.0.0"
commitizen = "^4.4.1"
mypy = "^1.15.0"
pyperclip-stubs = "^0.0.3"
ruff = "^0.11.2"
types-beautifulsoup4 = "^4.12.0.20250204"
types-paramiko = "^3.5.0.20240928"
types-pexpect = "^4.9.0.20241208"
types-pillow = "^10.2.0.20240822"
types-psutil = "^7.0.0.20250218"
types-pyyaml = "^6.0.12.20241230"
types-requests = "^2.32.0.20250306"
types-send2trash = "^1.8.2.7"
yapf = "^0.43.0"
yt-dlp-types = "^0.0.16"

[tool.poetry.group.docs]
optional = true

[tool.poetry.group.docs.dependencies]
doc8 = "^1.1.2"
docutils = "^0.21.2"
esbonio = "^0.16.5"
restructuredtext-lint = "^1.4.0"
sphinx = "^8.2.3"
sphinx-click = "^6.0.0"
tomlkit = "^0.13.2"

[tool.poetry.group.tests]
optional = true

[tool.poetry.group.tests.dependencies]
coveralls = "^4.0.1"
mock = "^5.2.0"
pytest = "^8.3.5"
pytest-cov = "^6.0.0"
pytest-mock = "^3.14.0"
requests-mock = "^1.12.1"

[[tool.poetry.packages]]
include = "tatsh_misc_utils"

[tool.poetry.scripts]
add-cdda-times = "tatsh_misc_utils.commands:add_cdda_times_main"
add-info-json = "tatsh_misc_utils.commands:add_info_json_main"
adp = "tatsh_misc_utils.commands:adp_main"
audio2vid = "tatsh_misc_utils.commands:audio2vid_main"
burnrariso = "tatsh_misc_utils.commands:burnrariso_main"
cddb-query = "tatsh_misc_utils.commands:cddb_query_main"
check-bookmarks-html = "tatsh_misc_utils.commands:check_bookmarks_html_main"
chrome-bisect-flags = "tatsh_misc_utils.commands:chrome_bisect_flags_main"
clean-old-kernels-modules = "tatsh_misc_utils.commands:clean_old_kernels_and_modules_main"
connect-g603 = "tatsh_misc_utils.commands:connect_g603_main"
encode-dashcam = "tatsh_misc_utils.commands:encode_dashcam_main"
fix-pwa-icon = "tatsh_misc_utils.commands:fix_chromium_pwa_icon_main"
flac-album = "tatsh_misc_utils.commands:flacted_main"
flac-artist = "tatsh_misc_utils.commands:flacted_main"
flac-dir-finalize = "tatsh_misc_utils.commands:flac_dir_finalize_main"
flac-genre = "tatsh_misc_utils.commands:flacted_main"
flac-title = "tatsh_misc_utils.commands:flacted_main"
flac-track = "tatsh_misc_utils.commands:flacted_main"
flac-year = "tatsh_misc_utils.commands:flacted_main"
flacted = "tatsh_misc_utils.commands:flacted_main"
fullwidth2ascii = "tatsh_misc_utils.commands:fullwidth2ascii_main"
git-checkout-default-branch = "tatsh_misc_utils.commands:git_checkout_default_branch_main"
git-co-default-branch = "tatsh_misc_utils.commands:git_checkout_default_branch_main"
git-open = "tatsh_misc_utils.commands:git_open_main"
git-rebase-default-branch = "tatsh_misc_utils.commands:git_rebase_default_branch_main"
gogextract = "tatsh_misc_utils.commands:gogextract_main"
hlg2sdr = "tatsh_misc_utils.commands:hlg2sdr_main"
htmltree = "tatsh_misc_utils.commands:generate_html_dir_tree_main"
inhibit-notifications = "tatsh_misc_utils.commands:inhibit_notifications_main"
is-ascii = "tatsh_misc_utils.commands:is_ascii_main"
is-bin = "tatsh_misc_utils.commands:is_bin_main"
json2yaml = "tatsh_misc_utils.commands:json2yaml_main"
kconfig-to-commands = "tatsh_misc_utils.commands:kconfig_to_commands_main"
ke-ebook-ex = "tatsh_misc_utils.commands:ke_ebook_ex_main"
kill-gamescope = "tatsh_misc_utils.commands:kill_gamescope_main"
kill-wine = "tatsh_misc_utils.commands:kill_wine_main"
merge-dependabot-prs = "tatsh_misc_utils.commands:merge_dependabot_prs_main"
mkwineprefix = "tatsh_misc_utils.commands:mkwineprefix_main"
mp4json = "tatsh_misc_utils.commands:add_info_json_main"
mp4json-display = "tatsh_misc_utils.commands:display_info_json_main"
mpv-sbs = "tatsh_misc_utils.commands:mpv_sbs_main"
mvid-rename = "tatsh_misc_utils.commands:mvid_rename_main"
netloc = "tatsh_misc_utils.commands:urldecode_main"
patch-bundle = "tatsh_misc_utils.commands:patch_bundle_main"
pl2json = "tatsh_misc_utils.commands:pl2json_main"
ripcd = "tatsh_misc_utils.commands:ripcd_main"
sanitize = "tatsh_misc_utils.commands:sanitize_main"
set-wine-fonts = "tatsh_misc_utils.commands:set_wine_fonts_main"
show-info-json = "tatsh_misc_utils.commands:display_info_json_main"
slug-rename = "tatsh_misc_utils.commands:slug_rename_main"
slugify = "tatsh_misc_utils.commands:slugify_main"
smv = "tatsh_misc_utils.commands:smv_main"
supported-audio-input-formats = "tatsh_misc_utils.commands:supported_audio_input_formats_main"
systemd-reset-tpm-cryptenroll = "tatsh_misc_utils.commands:reset_tpm_enrollments_main"
tbc2srt = "tatsh_misc_utils.commands:tbc2srt_main"
title-fixer = "tatsh_misc_utils.commands:title_fixer_main"
trim = "tatsh_misc_utils.commands:trim_main"
ucwords = "tatsh_misc_utils.commands:ucwords_main"
uiso = "tatsh_misc_utils.commands:ultraiso_main"
umpv = "tatsh_misc_utils.commands:umpv_main"
underscorize = "tatsh_misc_utils.commands:underscorize_main"
unix2wine = "tatsh_misc_utils.commands:unix2wine_main"
unpack-0day = "tatsh_misc_utils.commands:unpack_0day_main"
unregister-wine-assocs = "tatsh_misc_utils.commands:unregister_wine_file_associations_main"
upload-to-imgbb = "tatsh_misc_utils.commands:upload_to_imgbb_main"
urldecode = "tatsh_misc_utils.commands:urldecode_main"
wait-for-disc = "tatsh_misc_utils.commands:wait_for_disc_main"
where-from = "tatsh_misc_utils.commands:where_from_main"
winegoginstall = "tatsh_misc_utils.commands:winegoginstall_main"
wineshell = "tatsh_misc_utils.commands:wineshell_main"

[tool.poetry.urls]
Issues = "https://github.com/Tatsh/deltona/issues"

[tool.pyright]
deprecateTypingAliases = true
enableExperimentalFeatures = true
include = ["./tatsh_misc_utils", "./tests"]
pythonPlatform = "Linux"
pythonVersion = "3.12"
reportCallInDefaultInitializer = "warning"
reportImplicitOverride = "warning"
reportImportCycles = "error"
reportMissingModuleSource = "error"
reportPropertyTypeMismatch = "error"
reportShadowedImports = "error"
reportUnnecessaryTypeIgnoreComment = "none"
typeCheckingMode = "off"
useLibraryCodeForTypes = false

[tool.pytest]

[tool.pytest.ini_options]
mock_use_standalone_module = true
norecursedirs = ["node_modules"]
python_files = ["tests.py", "test_*.py", "*_tests.py"]
testpaths = ["tests"]

[tool.ruff]
cache-dir = "~/.cache/ruff"
extend-exclude = []
force-exclude = true
line-length = 100
namespace-packages = ["docs", "tests"]
target-version = "py312"
unsafe-fixes = true

[tool.ruff.lint]
extend-select = [
  "A",
  "AIR",
  "ANN",
  "ARG",
  "ASYNC",
  "B",
  "BLE",
  "C4",
  "C90",
  "COM",
  "CPY",
  "D",
  "DJ",
  "DTZ",
  "E",
  "EM",
  "ERA",
  "EXE",
  "F",
  "FA",
  "FBT",
  "FIX",
  "FLY",
  "FURB",
  "G",
  "I",
  "ICN",
  "INP",
  "INT",
  "ISC",
  "LOG",
  "N",
  "NPY",
  "PD",
  "PERF",
  "PGH",
  "PIE",
  "PL",
  "PT",
  "PTH",
  "PYI",
  "Q",
  "RET",
  "RSE",
  "RUF",
  "S",
  "SIM",
  "SLF",
  "SLOT",
  "T10",
  "T20",
  "TCH",
  "TD",
  "TID",
  "TRY",
  "UP",
  "YTT",
]
ignore = [
  "A005",
  "ANN401",
  "ARG001",
  "ARG002",
  "ARG004",
  "C901",
  "COM812",
  "CPY001",
  "D100",
  "D101",
  "D102",
  "D103",
  "D104",
  "D105",
  "D106",
  "D107",
  "D203",
  "D204",
  "D212",
  "EM101",
  "N818",
  "PLR0912",
  "PLR0913",
  "PLR0914",
  "PLR0915",
  "PLR0917",
  "PLR1702",
  "PLR6301",
  "S101",
  "S404",
  "S603",
  "TD002",
  "TD003",
  "TD004",
  "UP047",
]
preview = true

[tool.ruff.lint.flake8-quotes]
inline-quotes = "single"
multiline-quotes = "double"

[tool.ruff.lint.isort]
case-sensitive = true
combine-as-imports = true
from-first = true

[tool.ruff.lint.pep8-naming]
extend-ignore-names = ["test_*"]

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.yapf]
align_closing_bracket_with_visual_indent = true
allow_multiline_dictionary_keys = false
allow_multiline_lambdas = false
allow_split_before_dict_value = true
blank_line_before_class_docstring = false
blank_line_before_module_docstring = false
blank_line_before_nested_class_or_def = false
blank_lines_around_top_level_definition = 2
coalesce_brackets = true
column_limit = 100
continuation_align_style = "SPACE"
continuation_indent_width = 4
dedent_closing_brackets = false
disable_ending_comma_heuristic = false
each_dict_entry_on_separate_line = true
indent_dictionary_value = true
indent_width = 4
join_multiple_lines = true
no_spaces_around_selected_binary_operators = false
space_between_ending_comma_and_closing_bracket = false
spaces_around_default_or_named_assign = false
spaces_around_power_operator = true
spaces_before_comment = 2
split_all_comma_separated_values = false
split_arguments_when_comma_terminated = false
split_before_bitwise_operator = true
split_before_closing_bracket = true
split_before_dict_set_generator = true
split_before_dot = false
split_before_expression_after_opening_paren = false
split_before_first_argument = false
split_before_logical_operator = true
split_before_named_assigns = true
split_complex_comprehension = false
split_penalty_after_opening_bracket = 30
split_penalty_after_unary_operator = 10000
split_penalty_before_if_expr = 0
split_penalty_bitwise_operator = 300
split_penalty_comprehension = 80
split_penalty_excess_character = 7000
split_penalty_for_added_line_split = 30
split_penalty_import_names = 0
split_penalty_logical_operator = 300
use_tabs = false

[tool.yapfignore]
ignore_patterns = ["node_modules/**"]
