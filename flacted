#!/usr/bin/env python
from copy import copy
from os.path import basename
from typing import Optional, Tuple
import argparse
import subprocess as sp
import sys


def metaflac(*args) -> str:
    return sp.run(('metaflac', ) + args,
                  check=True,
                  stdout=sp.PIPE,
                  encoding='utf-8').stdout


def main() -> int:
    invoked_as = basename(sys.argv[0])
    if invoked_as != 'flacted' and len(sys.argv) >= 2:
        tag_requested = invoked_as.split('-')[1]
        possible: Tuple[str, ...] = (tag_requested.title(),
                                     tag_requested.upper(),
                                     tag_requested.lower())
        if tag_requested.lower() == 'year':
            possible += ('Date', 'DATE', 'date')
        unfiltered_files = sys.argv[1:]
        files = []
        for file in unfiltered_files:
            try:
                with open(file):
                    files.append(file)
            except FileNotFoundError:
                pass
        show_filename = len(files) > 1
        for filename in files:
            for tag in possible:
                val = metaflac(f'--show-tag={tag}', filename).strip()
                try:
                    val = val[len(tag) + 1:].splitlines()[0].strip()
                except IndexError:
                    val = ''
                if val:
                    if tag_requested.lower() == 'track':
                        try:
                            val_int: Optional[int] = int(val)
                        except TypeError:
                            val = ''
                            val_int = None
                        if val_int:
                            val = f'{val_int:02d}'
                    if show_filename:
                        print(f'{filename}: {val}')
                    else:
                        print(val)
                    break
        return 0
    parser = argparse.ArgumentParser()
    parser.add_argument('-t', '--title')
    parser.add_argument('-a', '--artist')
    parser.add_argument('-A', '--album')
    parser.add_argument('-y', '--year')
    parser.add_argument('-T', '--track')
    parser.add_argument('-g', '--genre')
    parser.add_argument('-p', '--picture')
    parser.add_argument('-D', '--delete-all-before', action='store_true')
    parser.add_argument('files', metavar='FILES', nargs='+')
    args = parser.parse_args()
    metaflac_args = ['--preserve-modtime', '--no-utf8-convert']
    cleanup_args = copy(metaflac_args)
    destroy = args.delete_all_before
    cleanup_args.append('--remove-all-tags')
    cleanup_args.extend(args.files)
    for key in ('title', 'artist', 'album', 'year', 'track', 'genre'):
        val = getattr(args, key, None)
        if not val:
            continue
        val = val.strip()
        if key == 'year':
            flac_tag = 'Date'
        elif key == 'track':
            flac_tag = 'Tracknumber'
        else:
            flac_tag = f'{key[0].upper()}{key[1:]}'
        metaflac_args.append(f'--set-tag={flac_tag}={val}')
    if args.picture:
        try:
            with open(args.picture, 'rb'):
                metaflac_args.append(f'--import-picture-from={args.picture}')
        except IOError:
            print(
                f'Cannot add file "{args.picture}". Specified argument is '
                'not supported',
                file=sys.stderr)
            return 1
    if len(metaflac_args) == 2:
        print('Not doing anything', file=sys.stderr)
        return 1
    if destroy:
        metaflac(cleanup_args)
    metaflac_args.extend(args.files)
    metaflac(metaflac_args)
    return 0


if __name__ == '__main__':
    sys.exit(main())
