#!/usr/bin/env python

import configparser
import os
import sqlite3
import sys
from datetime import datetime

try:
    base_domain = sys.argv[1]
except IndexError:
    print('Usage: %s BASEDOMAIN' % sys.argv[0])
    sys.exit(1)

home = os.environ['HOME']
chrome_sqlite_file = os.path.join(home, '.config', 'chromium', 'Default',
                                  'Cookies')

mozilla_profiles_file = os.path.join(home, '.mozilla', 'firefox',
                                     'profiles.ini')
active_profile = None
config = configparser.ConfigParser()

config.read(mozilla_profiles_file)
sections = config.sections()
i = 0

for section in sections:
    if section == 'general':
        i += 1
        continue

    if config[section].getboolean('default', fallback=False) is True:
        active_profile = config[section].get('path', fallback=None)

        # Sometimes a full path is given
        is_full_path = os.sep in active_profile
        break

    i += 1

mozilla_db_file = os.path.join(active_profile, 'cookies.sqlite')
if is_full_path is False:
    mozilla_db_file = os.path.join(home, '.mozilla', 'firefox',
                                   mozilla_db_file)

conn = sqlite3.connect(mozilla_db_file, detect_types=sqlite3.PARSE_COLNAMES)
c = conn.cursor()
sql = ('SELECT name, value, host, path, expiry, isSecure, isHttpOnly FROM ' +
       'moz_cookies WHERE baseDomain like ?')
c.execute(sql, ('%' + base_domain + '%', ))
cookies = []

for row in c:
    cookies.append({
        'name': row[0],
        'value': row[1],
        'host_key': row[2],
        'path': row[3],
        'expires_utc': row[4],  # Unix timestamp in seconds
        'secure': int(row[5]),
        'httponly': int(row[6]),
    })

conn.close()

conn = sqlite3.connect(chrome_sqlite_file, detect_types=sqlite3.PARSE_COLNAMES)
c = conn.cursor()
i = 0
creation_utc = int(
    (datetime.utcnow() - datetime(1970, 1, 1)).total_seconds() * (10**7))

columns = [
    'creation_utc', 'host_key', 'name', 'value', 'path', 'expires_utc',
    'secure', 'httponly', 'has_expires', 'persistent', 'last_access_utc'
]

for dic in cookies:
    dic['expires_utc'] = int(float(dic['expires_utc'])) * (10**7)
    has_expires = persistent = 1

    if dic['expires_utc'] == 0:
        has_expires = 0
        persistent = 0

    query = '''
DELETE FROM cookies WHERE host_key = ? AND name = ? AND path = ?
'''
    c.execute(query, (
        dic['host_key'],
        dic['name'],
        dic['path'],
    ))

    query = (
        'INSERT INTO cookies (%s) VALUES(%s)' % (','.join(columns),
                                                 ('?,' * len(columns))[:-1]))
    t = (creation_utc + i, dic['host_key'], dic['name'], dic['value'],
         dic['path'], dic['expires_utc'], dic['secure'], dic['httponly'],
         has_expires, persistent, creation_utc)

    c.execute(query, t)
    i = i + 1

conn.commit()
conn.close()

print('Imported %d cookies' % (len(cookies)))
