#!/usr/bin/env python
# PYTHON_ARGCOMPLETE_OK
from html import escape
from itertools import chain
from os import chdir, scandir
from os.path import basename, realpath
from typing import Any, Iterator
import argparse
import sys

from typing_extensions import Final

try:
    import argcomplete
except ImportError:
    argcomplete = None

CSS_URI: Final = 'https://cdn.muicss.com/mui-0.10.1/css/mui.min.css'

def scandir_ignore(*args: Any, **kwargs: Any):
    try:
        return scandir(*args, **kwargs)
    except Exception as e:
        print(f'Error: {e}', file=sys.stderr)
        return []


def recurse_cwd(path: str,
                follow_symlinks: bool = False,
                depth: int = 1,
                _cur_depth: int = 0) -> Iterator[str]:
    for entry in sorted(
            sorted(scandir_ignore(path), key=lambda x: x.name),
            key=lambda x: not x.is_dir(follow_symlinks=follow_symlinks)):
        if (entry.is_dir(follow_symlinks=follow_symlinks)
                and _cur_depth < depth):
            yield ('<li class="dir"><details><summary>'
                   f'<code>{escape(entry.name)}/</code></summary><ul>')
            yield from recurse_cwd(entry.path,
                                   follow_symlinks=follow_symlinks,
                                   depth=depth,
                                   _cur_depth=_cur_depth + 1)
            yield '</ul></details></li>'
        else:
            isd = entry.is_dir(follow_symlinks=follow_symlinks)
            class_ = 'file' if not isd else 'dir'
            slash = '' if not isd else '/'
            yield (f'<li class="{class_}">'
                   f'<code>{escape(entry.name)}{slash}</code></li>')


def main() -> int:
    parser: Final = argparse.ArgumentParser(
        basename(sys.argv[0]),
        description='Generate a directory listing in HTML 5.')
    parser.add_argument('dir', nargs=1)
    parser.add_argument('-s', '--follow-symlinks', action='store_true')
    parser.add_argument('-d', '--depth', default=1, type=int)
    if argcomplete:
        argcomplete.autocomplete(parser)
    args: Final = parser.parse_args()
    chdir(args.dir[0])
    title: Final = basename(realpath(args.dir[0]))
    files: Final = ''.join(
        chain.from_iterable(
            recurse_cwd(args.dir[0], args.follow_symlinks, args.depth)))
    print(f'''<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="utf-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1">
<title>Contents of {title}/</title>
<link rel="stylesheet" href="{CSS_URI}" crossorigin="anonymous">
<style>
ul {{
    list-style: none;
}}
code {{
    color: #000;
}}
.dir {{
    font-weight: bold;
}}
.file {{
    font-weight: normal;
}}
</style>
</head>
<body>
<ul>{files}</ul>
</body>
</html>''')
    return 0


if __name__ == '__main__':
    sys.exit(main())
