#!/usr/bin/env python
from html import escape
from os import chdir, scandir
from os.path import basename, realpath
from typing import Any, Iterable, Iterator, List, Union, cast
import argparse
import sys

BOOTSTRAP_CSS_URI = (
    'https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css')
BOOTSTRAP_CSS_HASH = (
    'sha384-MCw98/SFnGE8fJT3GXwEOngsV7Zt27NXFoaoApmYm81iuXoPkFOJwJ8ERdknLPMO')


def flatten(
    items: Iterable[Union[str, bytes, List[Any]]]
) -> Iterator[Union[Any, str, bytes]]:
    """
    Yield items from any nested iterable.
    Credit: https://stackoverflow.com/a/40857703
    """
    for x in items:
        if isinstance(x, Iterable) and not isinstance(x, (str, bytes)):
            for sub_x in flatten(x):
                yield sub_x
        else:
            yield x


def recurse_cwd(path: str,
                follow_symlinks: bool = False,
                depth: int = 1,
                _cur_depth: int = 0) -> List[Union[str, List[Any]]]:
    files: List[Union[str, List[Any]]] = []
    for entry in sorted(
            sorted(scandir(path), key=lambda x: x.name),
            key=lambda x: not x.is_dir(follow_symlinks=follow_symlinks)):
        if (entry.is_dir(follow_symlinks=follow_symlinks)
                and _cur_depth < depth):
            files.append('<li class="dir"><details><summary>'
                         f'<code>{escape(entry.name)}/</code></summary><ul>')
            files.append(
                recurse_cwd(entry.path,
                            follow_symlinks=follow_symlinks,
                            depth=depth,
                            _cur_depth=_cur_depth + 1))
            files.append('</ul></details></li>')
        else:
            isd = entry.is_dir(follow_symlinks=follow_symlinks)
            class_ = 'file' if not isd else 'dir'
            slash = '' if not isd else '/'
            files.append(f'<li class="{class_}">'
                         f'<code>{escape(entry.name)}{slash}</code></li>')
    return files


def main() -> int:
    parser = argparse.ArgumentParser(
        basename(sys.argv[0]),
        description='Generate a directory listing in HTML 5.')
    parser.add_argument('dir', nargs=1)
    parser.add_argument('-s', '--follow-symlinks', action='store_true')
    parser.add_argument('-d', '--depth', default=1, type=int)
    args = parser.parse_args()
    chdir(args.dir[0])
    title = basename(realpath(args.dir[0]))
    files = ''.join(
        cast(
            Iterable[str],
            flatten(recurse_cwd(args.dir[0], args.follow_symlinks,
                                args.depth))))
    print(f'''<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="utf-8">
<title>Contents of {title}/</title>
<link rel="stylesheet" href="{BOOTSTRAP_CSS_URI}"
integrity="{BOOTSTRAP_CSS_HASH}" crossorigin="anonymous">
<style>
ul {{
    list-style-type: none;
}}
code {{
    color: #000;
    font-size: 80%;
}}
.dir {{
    font-weight: bold;
}}
.file {{
    font-weight: normal;
}}
</style>
</head>
<body>
<ul>{files}</ul>
</body>
</html>''')
    return 0


if __name__ == '__main__':
    sys.exit(main())
