#!/usr/bin/env php
<?php
namespace Curl2Php;

class ValueError extends \Exception
{
}

function dict(iterable $arr): array
{
    $ret = [];
    foreach ($arr as list($key, $value)) {
        $ret[trim($key)] = trim($value);
    }
    return $ret;
}

function array_to_php_array_string(iterable $arr, ?int &$count)
{
    $arr = iterator_to_array($arr);
    $count = count($arr);
    $ret = json_encode(dict($arr));
    if ($ret === '[]') {
        return $ret;
    }
    $ret = str_replace('\\/', '/', $ret);
    $ret = str_replace('","', "\",\n    \"", $ret);
    $ret = str_replace('":"', "' => '", $ret);
    $ret = "\n" . '    '.substr($ret, 1, -1) . ",\n";

    return '[' . str_replace('"', "'", $ret) . '  ]';
}

function parse_headers(
    iterable $arr,
    bool $acceptEncoding = false,
    bool $cookies = false
) {
    $lastWasHeaderPos = $lastWasDataPos = false;

    foreach ($arr as $i => $arg) {
        if ($lastWasHeaderPos) {
            $lastWasHeaderPos = false;
            continue;
        }

        if ($lastWasDataPos) {
            $lastWasDataPos = false;
            continue;
        }

        if ($arg === '-H' || $arg === '--header') {
            if (isset($arr[$i + 1])) {
                $parts = explode(':', $arr[$i + 1], 2);

                if (count($parts) !== 2) {
                    throw new ValueError('Invalid header argument. Header ' .
                                         'must be of format: "Header-Name: ' .
                                         'EncodedValue"');
                }

                $parts[0] = strtolower($parts[0]);

                if ((!$acceptEncoding && $parts[0] === 'accept-encoding') ||
                    (!$cookies && $parts[0] === 'cookie')) {
                    continue;
                }

                yield $parts;
            }

            $lastWasHeaderPos = true;
        }
    }
}

function get_data_argument(iterable $arr)
{
    foreach ($arr as $i => $arg) {
        if ($arg === '--data') {
            return $arr[$i + 1];
        }
    }

    return null;
}

function ifilter(iterable $arr, callable $cb) {
    foreach ($arr as $v) {
        if ($cb($v)) {
            yield $v;
        }
    }
}

/**
* Only -H, --header, and --data are supported.
*
* @param integer  $argc Argument count.
* @param iterable $argv Argument array.
*
* @return string
*/
function main(int $argc, iterable $argv)
{
    $headers = parse_headers($argv);
    $postData = get_data_argument($argv);
    $url = ifilter(
        $argv,
        function ($x) {
            return filter_var(
                $x,
                FILTER_VALIDATE_URL,
                FILTER_NULL_ON_FAILURE
            );
        }
    );

    $cookie = trim(ifilter($argv, function ($x) {
        return substr(strtolower($x), 0, 7) === 'cookie:';
    })->current());
    $format = [
        '<?php',
        'use GuzzleHttp;',
        "\$client = new GuzzleHttp\Client();",
    ];

    if ($cookie) {
        $format[] = "\$jar = new GuzzleHttp\Cookie\CookieJar(false, [";
        $format[] = "  GuzzleHttp\Cookie\SetCookie::fromString('%s'),";
        $format[] = "]);";
        $args[] = $cookie;
    }

    $args[] = $postData ? 'POST' : 'GET';
    $args[] = $url->current();
    $format[] = "\$res = \$client->request('%s', '%s', [";

    $header_args = array_to_php_array_string($headers, $count);
    if ($count) {
        $args[] = $header_args;
        $format[] = "  'headers' => %s,";
    }
    if ($cookie) {
        $format[] = "  'cookies' => \$jar,";
    }

    if ($postData) {
        $args[] = $postData;
        $format[] = "  'body' => '%s',";
    }

    $format[] = ']);';
    $format[] = "print(\$res->getBody());\n";

    return vsprintf(join("\n", $format), $args);
}

print(main($argc, $argv));
