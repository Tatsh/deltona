#!/usr/bin/env python
from os import chmod, close, environ, makedirs
from os.path import expanduser, join as path_join
from tempfile import mkdtemp, mkstemp
import argparse
import plistlib
import platform
import subprocess

is_windows = len(
    ''.join(list(platform.win32_ver()) +
            [environ.get('MSYSTEM_CHOST', '')])) != 0
is_mac = bool(platform.mac_ver()[0])
is_linux = not is_mac and not is_windows


def main():
    chrome_command_kwargs = dict(required=True)
    comment_kwargs = dict(required=True)
    icon_kwargs = {}
    if is_linux:
        chrome_command_kwargs = dict(default='chromium-browser')
        icon_kwargs = dict(default='chromium-browser')
        comment_kwargs = {}
    if is_mac:
        icon_kwargs = dict(required=True)

    parser = argparse.ArgumentParser()
    parser.add_argument('-c', '--chrome-command', **chrome_command_kwargs)
    parser.add_argument('-p', '--profile-directory', default='Default')
    parser.add_argument('-i', '--icon', **icon_kwargs)
    if is_linux:
        parser.add_argument('-C', '--categories', default='Network;')
    if not is_mac:
        parser.add_argument('-d', '--comment', **comment_kwargs)
    if is_windows:
        parser.add_argument('--window-style', type=int, default=1)
        parser.add_argument('--hotkey')
    parser.add_argument('name')
    parser.add_argument('url')
    args = parser.parse_args()

    if is_linux:
        # Create .desktop file
        apps_dir = expanduser('~/.local/share/applications')
        try:
            makedirs(apps_dir)
        except FileNotFoundError:
            pass
        out_name = path_join(
            apps_dir,
            f'chrome-{args.name}-{args.profile_directory}.desktop'.replace(
                ' ', ''))
        try_exec = args.chrome_command.replace(' ', r'\ ')
        with open(out_name, 'w+') as f:
            f.write(f'''#!/usr/bin/env xdg-open
[Desktop Entry]
Version=1.0
Terminal=false
Type=Application
TryExec={try_exec}
Categories={args.categories or ''}
Comment={args.comment or ''}
Name={args.name}
Exec={args.chrome_command} "--user-data-directory={args.profile_directory}"'''
                    f'''"--app={args.url}"
Icon={args.icon}
''')
        subprocess.check_call(['update-desktop-database', apps_dir])
    elif is_mac:
        iconset_dir = mkdtemp(suffix='.iconset')
        for width in (2**x for x in range(1, 11)):
            subprocess.check_call([
                'sips', '-z',
                str(width),
                str(width), args.icon, '--out',
                path_join(iconset_dir, f'icon_{width}x{width}.png')
            ],
                                  stdout=subprocess.PIPE)
            subprocess.check_call([
                'sips', '-z',
                str(width),
                str(width), args.icon, '--out',
                path_join(iconset_dir, f'icon_{width//2}x{width//2}@2x.png')
            ],
                                  stdout=subprocess.PIPE)
        app_dir = expanduser(
            f'~/Applications/Chrome Apps.localized/{args.name}.app')
        contents_dir = path_join(app_dir, 'Contents')
        macos_dir = path_join(contents_dir, 'MacOS')
        res_dir = path_join(contents_dir, 'Resources')
        profile_dir_short = args.profile_directory.replace(' ', '')
        name_short = args.name.replace(' ', '')
        bundle_id = f'com.google.Chrome.app.{profile_dir_short}-{name_short}'
        info_plist_data = dict(
            CFBundleDevelopmentRegion='en',
            CFBundleExecutable='app_mode_loader',
            CFBundleIconFile='app.icns',
            CFBundleIdentifier=bundle_id,
            CFBundleInfoDictionaryVersion='6.0',
            CFBundleName=args.name,
            CFBundlePackageType='APPL',
            CFBundleShortVersionString='2019.10.11.39800',
            CFBundleSignature='????',
            CFBundleVersion='3904.50',
            LSEnvironment=dict(MallocNanoZone='0'),
            LSMinimumSystemVersion='10.10.0',
            NSAppleScriptEnabled=True,
            NSHighResolutionCapable=True,
        )
        for x in (contents_dir, macos_dir, res_dir):
            try:
                makedirs(x)
            except FileExistsError:
                pass
        subprocess.check_call([
            'iconutil', '-c', 'icns', iconset_dir, '-o',
            path_join(res_dir, 'app.icns')
        ],
                              stdout=subprocess.PIPE)
        script = path_join(macos_dir, 'app_mode_loader')
        with open(script, 'w+') as f:
            f.write('#!/usr/bin/env bash\n')
            f.write(f"open -n '{args.chrome_command}' --args "
                    f"'--app={args.url}' "
                    f'--user-data-directory={args.profile_directory}\n')
        chmod(script, 0o755)
        with open(path_join(contents_dir, 'Info.plist'), 'wb+') as f:
            plistlib.dump(info_plist_data, f)
        with open(path_join(contents_dir, 'PkgInfo'), 'w+') as f:
            f.write('APPL????')
    elif is_windows:
        # Generate a JScript file and run it
        fd, script_js = mkstemp(suffix='.js')
        close(fd)
        link_args = (f'"--app={args.url}" '
                     f'"--user-data-directory={args.profile_directory}"')
        default_icon = f'{args.chrome_command},0'
        with open(script_js, 'w+') as f:
            f.write(f'''var ows = WScript.CreateObject('WScript.Shell');
var desktop = ows.SpecialFolders('Desktop');
var link = ows.CreateShortcut(desktop + '\\\\{args.name}.lnk');
link.WorkingDirectory = desktop;\n''')
            props = dict(
                TargetPath=args.chrome_command,
                Arguments=' '.join(
                    map(lambda x: f'"{x}"',
                        (f'--app={args.url}',
                         f'--user-data-directory={args.profile_directory}'))),
                IconLocation=args.icon or default_icon,
                WindowStyle=args.window_style,
                Description=args.comment,
            )
            if args.hotkey:
                props['Hotkey'] = args.hotkey
            for prop, val in props.items():
                if isinstance(val, str):
                    val = f"'{val}'"
                f.write(f"link.{prop} = {val};\n")
            f.write('link.Save();\n')
        subprocess.check_call(['cscript', '//Nologo', script_js])
    else:
        raise OSError('Should never get here')


if __name__ == '__main__':
    main()
