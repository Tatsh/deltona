#!/usr/bin/env python
from glob import glob
from os import chmod, close, environ, makedirs, write
from os.path import basename, expanduser, join as path_join, splitext
from tempfile import mkdtemp, mkstemp
from typing import List, Optional
from urllib.parse import urljoin, urlparse
import argparse
import logging
import platform
import plistlib
import re
import subprocess
import sys

from bs4 import BeautifulSoup, Tag
import requests

is_msys = len(environ.get('MSYSTEM_CHOST', '')) != 0
is_windows = is_msys or len(''.join(platform.win32_ver())) != 0
is_mac = bool(platform.mac_ver()[0])
is_linux = not is_mac and not is_windows
USER_AGENT = (
    'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_1) '
    'AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.29 Safari/537.36')

log: Optional[logging.Logger] = None


def setup_logging_stdout(name: Optional[str] = None,
                         verbose: bool = False) -> None:
    global log
    name = name if name else basename(sys.argv[0])
    log = logging.getLogger(name)
    log.setLevel(logging.DEBUG if verbose else logging.INFO)
    channel = logging.StreamHandler(sys.stdout)
    channel.setFormatter(logging.Formatter('%(asctime)s - %(message)s'))
    channel.setLevel(logging.DEBUG if verbose else logging.INFO)
    log.addHandler(channel)


def fix_msys_arg(s: str) -> str:
    return s.replace('\n', ' ').replace('\\', '\\\\') if is_msys else s


def main():
    chrome_command_kwargs = dict(required=True)
    if is_linux:
        chrome_command_kwargs = dict(default='chromium-browser')
    parser = argparse.ArgumentParser()
    parser.add_argument('-v', '--verbose', action='store_true')
    parser.add_argument('-c', '--chrome-command', **chrome_command_kwargs)
    parser.add_argument('-p', '--profile-directory', default='Default')
    parser.add_argument('-i', '--icon')
    if is_linux:
        parser.add_argument('-C', '--categories', default='Network;')
    if not is_mac:
        parser.add_argument('-d', '--comment')
    if is_windows:
        parser.add_argument('--window-style', type=int, default=1)
        parser.add_argument('--hotkey')
    parser.add_argument('name')
    parser.add_argument('url')
    args = parser.parse_args()
    setup_logging_stdout(verbose=args.verbose)
    short_name = args.name.replace(' ', '')
    session = requests.Session()
    session.headers.update({'user-agent': USER_AGENT})
    if not args.icon:
        r = session.get(args.url)
        s = BeautifulSoup(r.content, 'lxml')
        options = ('link[rel="apple-touch-icon"]', 'link[rel="shortcut icon"]',
                   'link[rel="icon"]', 'meta[name="msapplication-TileImage"]')
        tags: List[Tag] = s.select(','.join(options))
        if not tags:
            args.icon = None
        sizes = [(0, urljoin(args.url, '/favicon.ico'))]
        for tag in tags:
            uri = tag.attrs.get('href', tag.attrs.get('content'))
            if uri:
                if 'sizes' in tag.attrs:
                    size = int(tag['sizes'].split('x')[0])
                    icon_uri = urljoin(args.url, uri)
                    log.debug('Icon with size %dx%d at URI %s', size, size,
                              icon_uri)
                    sizes.append((size, icon_uri))
                else:
                    icon_uri = urljoin(args.url, uri)
                    log.debug('Icon without size at URI %s', icon_uri)
                    sizes.append((1, urljoin(args.url, icon_uri)))
        args.icon = sorted(sizes, reverse=True, key=lambda x: x[0])[0][1]
        log.debug('Using icon URI %s', args.icon)
        if args.icon and session.get(args.icon).status_code != 200:
            args.icon = None
        if not args.icon and is_mac:
            log.info('Need -i argument')
            return 1
    if re.match(r'https?\://', args.icon or ''):
        r = session.get(args.icon, stream=True)
        icon_prefix, icon_ext = splitext(urlparse(args.icon).path)
        icon_ext = icon_ext.lower()
        if is_linux:
            if icon_ext in ('.png', '.xpm'):
                args.icon = expanduser(
                    f'~/.local/share/pixmaps/{short_name}{icon_ext}')
                with open(args.icon, 'wb+') as f:
                    for chunk in r.iter_content(chunk_size=128):
                        f.write(chunk)
            elif icon_ext == '.svg':
                args.icon = expanduser('~/.local/share/icons/hicolor/scalable/'
                                       f'apps/{short_name}{icon_ext}')
                with open(args.icon, 'wb+') as f:
                    for chunk in r.iter_content(chunk_size=128):
                        f.write(chunk)
            else:
                fd, tmp_name = mkstemp(suffix=icon_ext)
                args.icon = expanduser('~/.local/share/pixmaps/'
                                       f'{short_name}.png')
                for chunk in r.iter_content(chunk_size=128):
                    write(fd, chunk)
                close(fd)
                index = ''
                if icon_ext == '.ico':
                    index = str(
                        list(
                            enumerate(
                                sorted(subprocess.check_output(
                                    ['identify', '-format', '%w\n', tmp_name],
                                    encoding='utf-8').splitlines(),
                                       reverse=True)))[0][0])
                    index = f'[{index}]'
                subprocess.check_call(
                    ['convert', f'{tmp_name}{index}', args.icon])
                try:
                    with open(args.icon, 'rb'):
                        if len(f.read()) <= 10:
                            raise FileNotFoundError()
                except FileNotFoundError:
                    args.icon = sorted(glob(f'{icon_prefix}-*.png'),
                                       reverse=True)[0]
        elif is_mac:
            if icon_ext != '.png':
                log.debug('Converting icon to PNG')
                fd, tmp_name = mkstemp(suffix=icon_ext)
                fd2, args.icon = mkstemp(suffix='.png')
                close(fd2)
                for chunk in r.iter_content(chunk_size=128):
                    write(fd, chunk)
                close(fd)
                index = ''
                if icon_ext == '.ico':
                    index = str(
                        list(
                            enumerate(
                                sorted(subprocess.check_output(
                                    ['identify', '-format', '%w\n', tmp_name],
                                    encoding='utf-8').splitlines(),
                                       reverse=True)))[0][0])
                    index = f'[{index}]'
                convert_args = ('convert', f'{tmp_name}{index}', args.icon)
                log.debug('Executing: %s', ' '.join(convert_args))
                subprocess.check_call(convert_args)
                try:
                    with open(args.icon, 'rb') as f:
                        if len(f.read()) <= 10:
                            raise FileNotFoundError()
                except FileNotFoundError:
                    icon_prefix = splitext(args.icon)[0]
                    args.icon = sorted(glob(f'{icon_prefix}-*.png'),
                                       reverse=True)[0]
            else:
                fd, args.icon = mkstemp(suffix='.png')
                for chunk in r.iter_content(chunk_size=128):
                    write(fd, chunk)
                close(fd)
        else:  # Windows
            if icon_ext != '.ico':
                fd, tmp_name = mkstemp(suffix=icon_ext)
                fd2, args.icon = mkstemp(suffix='.ico')
                close(fd2)
                for chunk in r.iter_content(chunk_size=128):
                    write(fd, chunk)
                close(fd)
                subprocess.check_call(['convert', tmp_name, args.icon])
            else:
                args.icon = expanduser('~/AppData/Roaming/'
                                       f'chrome-link-{args.name}.ico')
                with open(args.icon, 'wb+') as f:
                    for chunk in r.iter_content(chunk_size=128):
                        f.write(chunk)
    if is_linux:
        # Create .desktop file
        apps_dir = expanduser('~/.local/share/applications')
        makedirs(apps_dir, exist_ok=True)
        out_name = path_join(
            apps_dir,
            f'chrome-{args.name}-{args.profile_directory}.desktop'.replace(
                ' ', ''))
        try_exec = args.chrome_command.replace(' ', r'\ ')
        with open(out_name, 'w+') as f:
            f.write(f'''#!/usr/bin/env xdg-open
[Desktop Entry]
Version=1.0
Terminal=false
Type=Application
TryExec={try_exec}
Categories={args.categories or ''}
Comment={args.comment or ''}
Name={args.name}
Exec={args.chrome_command} "--user-data-directory={args.profile_directory}"'''
                    f''' "--app={args.url}"
Icon={args.icon}
''')
        subprocess.check_call(['update-desktop-database', apps_dir])
    elif is_mac:
        iconset_dir = mkdtemp(suffix='.iconset')
        for width in (2**x for x in range(1, 11)):
            subprocess.check_call([
                'sips', '-z',
                str(width),
                str(width), args.icon, '--out',
                path_join(iconset_dir, f'icon_{width}x{width}.png')
            ],
                                  stdout=subprocess.PIPE)
            subprocess.check_call([
                'sips', '-z',
                str(width),
                str(width), args.icon, '--out',
                path_join(iconset_dir, f'icon_{width//2}x{width//2}@2x.png')
            ],
                                  stdout=subprocess.PIPE)
        app_dir = expanduser(
            f'~/Applications/Chrome Apps.localized/{args.name}.app')
        contents_dir = path_join(app_dir, 'Contents')
        macos_dir = path_join(contents_dir, 'MacOS')
        res_dir = path_join(contents_dir, 'Resources')
        profile_dir_short = args.profile_directory.replace(' ', '')
        bundle_id = f'com.google.Chrome.app.{profile_dir_short}-{short_name}'
        info_plist_data = dict(
            CFBundleExecutable='app_mode_loader',
            CFBundleIconFile='app.icns',
            CFBundleIdentifier=bundle_id,
            CFBundleName=args.name,
            LSEnvironment=dict(MallocNanoZone='0'),
            NSAppleScriptEnabled=True,
            NSHighResolutionCapable=True,
        )
        for x in (contents_dir, macos_dir, res_dir):
            makedirs(x, exist_ok=True)
        subprocess.check_call([
            'iconutil', '-c', 'icns', iconset_dir, '-o',
            path_join(res_dir, 'app.icns')
        ],
                              stdout=subprocess.PIPE)
        script = path_join(macos_dir, 'app_mode_loader')
        with open(script, 'w+') as f:
            f.write('#!/usr/bin/env bash\n')
            f.write(f"open -n '{args.chrome_command}' --args "
                    f"'--app={args.url}' "
                    f'--user-data-directory={args.profile_directory}\n')
        chmod(script, 0o755)
        with open(path_join(contents_dir, 'Info.plist'), 'wb+') as f:
            plistlib.dump(info_plist_data, f)
    else:  # Windows
        # Generate a JScript file and run it
        fd, script_js = mkstemp(suffix='.js')
        close(fd)
        with open(script_js, 'w+') as f:
            f.write(f'''var ows = WScript.CreateObject('WScript.Shell');
var desktop = ows.SpecialFolders('Desktop');
var link = ows.CreateShortcut(desktop + '\\\\{args.name}.lnk');
link.WorkingDirectory = desktop;\n''')
            if is_msys and args.chrome_command.startswith('/'):
                args.chrome_command = fix_msys_arg(
                    subprocess.check_output(
                        ['cygpath', '-w',
                         args.chrome_command]).decode('utf-8').strip())
            default_icon = f'{args.chrome_command},0'
            props = dict(
                TargetPath=args.chrome_command,
                Arguments=fix_msys_arg(' '.join(
                    map(lambda x: f'"{x}"',
                        (f'--app={args.url}',
                         f'--user-data-directory={args.profile_directory}')))),
                IconLocation=fix_msys_arg(args.icon)
                if args.icon else default_icon,
                WindowStyle=args.window_style,
            )
            if args.comment:
                props['Description'] = args.comment
            if args.hotkey:
                props['Hotkey'] = args.hotkey
            for prop, val in props.items():
                if isinstance(val, str):
                    val = f"'{val}'"
                f.write(f"link.{prop} = {val};\n")
            f.write('link.Save();\n')
        try:
            subprocess.check_call(['cscript', '//Nologo', script_js])
        except subprocess.CalledProcessError as e:
            log.error(f'Caught exception: {e}')
            with open(script_js, 'r') as f:
                log.info(f.read())


if __name__ == '__main__':
    sys.exit(main())
