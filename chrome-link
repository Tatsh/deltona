#!/usr/bin/env python
from glob import glob
from os import chmod, close, environ, makedirs, write
from os.path import expanduser, join as path_join, splitext
from tempfile import mkdtemp, mkstemp
from urllib.parse import urlparse
import argparse
import platform
import plistlib
import re
import subprocess
import sys

try:
    import requests
    HAS_REQUESTS = True
except ImportError:
    HAS_REQUESTS = False

is_msys = len(environ.get('MSYSTEM_CHOST', '')) != 0
is_windows = is_msys or len(''.join(platform.win32_ver())) != 0
is_mac = bool(platform.mac_ver()[0])
is_linux = not is_mac and not is_windows


def fix_msys_arg(s: str) -> str:
    return s.replace('\n', ' ').replace('\\', '\\\\') if is_msys else s


def main():
    chrome_command_kwargs = dict(required=True)
    if is_linux:
        chrome_command_kwargs = dict(default='chromium-browser')

    parser = argparse.ArgumentParser()
    parser.add_argument('-c', '--chrome-command', **chrome_command_kwargs)
    parser.add_argument('-p', '--profile-directory', default='Default')
    parser.add_argument('-i', '--icon')
    if is_linux:
        parser.add_argument('-C', '--categories', default='Network;')
    if not is_mac:
        parser.add_argument('-d', '--comment')
    if is_windows:
        parser.add_argument('--window-style', type=int, default=1)
        parser.add_argument('--hotkey')
    parser.add_argument('name')
    parser.add_argument('url')
    args = parser.parse_args()

    if not args.icon and HAS_REQUESTS:
        p = urlparse(args.url)
        args.icon = f'{p.scheme}://{p.netloc}/favicon.ico'
        r = requests.head(args.icon)
        if r.status_code != 200:
            args.icon = None
            if is_mac:
                print('Need -i argument', file=sys.stderr)
                return 1

    if re.match(r'https?\://', args.icon or '') and HAS_REQUESTS:
        r = requests.get(args.icon, stream=True)
        if is_linux:
            short_name = args.name.replace(' ', '')
            ext = splitext(urlparse(args.icon).path)[1].lower()
            if ext in ('.png', '.xpm'):
                args.icon = expanduser(
                    f'~/.local/share/pixmaps/{short_name}{ext}')
                with open(args.icon, 'wb+') as f:
                    for chunk in r.iter_content(chunk_size=128):
                        f.write(chunk)
            elif ext == '.svg':
                args.icon = expanduser('~/.local/share/icons/hicolor/scalable/'
                                       f'apps/{short_name}{ext}')
                with open(args.icon, 'wb+') as f:
                    for chunk in r.iter_content(chunk_size=128):
                        f.write(chunk)
            else:
                fd, tmp_name = mkstemp(
                    suffix=splitext(urlparse(args.icon).path)[1])
                args.icon = expanduser('~/.local/share/pixmaps/'
                                       f'{short_name}.png')
                for chunk in r.iter_content(chunk_size=128):
                    write(fd, chunk)
                close(fd)
                subprocess.check_call(['convert', tmp_name, args.icon])
                try:
                    with open(args.icon, 'rb'):
                        pass
                except FileNotFoundError:
                    args.icon = sorted(glob(f'{splitext(args.icon)[0]}-*.png'),
                                       reverse=True)[0]
        elif is_mac:
            ext = splitext(urlparse(args.icon).path)[1].lower()
            if ext != '.png':
                fd, tmp_name = mkstemp(suffix=ext)
                fd2, args.icon = mkstemp(suffix='.png')
                close(fd2)
                for chunk in r.iter_content(chunk_size=128):
                    write(fd, chunk)
                close(fd)
                subprocess.check_call(['convert', tmp_name, args.icon])
                try:
                    with open(args.icon, 'rb'):
                        pass
                except FileNotFoundError:
                    args.icon = sorted(glob(f'{splitext(new_name)[0]}-*.png'),
                                       reverse=True)[0]
            else:
                fd, args.icon = mkstemp(suffix='.png')
                for chunk in r.iter_content(chunk_size=128):
                    write(fd, chunk)
                close(fd)
        else:
            ext = splitext(urlparse(args.icon).path)
            if ext != '.ico':
                fd, tmp_name = mkstemp(suffix=ext)
                fd2, args.icon = mkstemp(suffix='.ico')
                close(fd2)
                for chunk in r.iter_content(chunk_size=128):
                    write(fd, chunk)
                close(fd)
                subprocess.check_call(['convert', tmp_name, args.icon])
            else:
                args.icon = expanduser('~/AppData/Roaming/'
                                       f'chrome-link-{args.name}.ico')
                with open(args.icon, 'wb+') as f:
                    for chunk in r.iter_content(chunk_size=128):
                        f.write(chunk)

    if is_linux:
        # Create .desktop file
        apps_dir = expanduser('~/.local/share/applications')
        try:
            makedirs(apps_dir)
        except FileExistsError:
            pass
        out_name = path_join(
            apps_dir,
            f'chrome-{args.name}-{args.profile_directory}.desktop'.replace(
                ' ', ''))
        try_exec = args.chrome_command.replace(' ', r'\ ')
        with open(out_name, 'w+') as f:
            f.write(f'''#!/usr/bin/env xdg-open
[Desktop Entry]
Version=1.0
Terminal=false
Type=Application
TryExec={try_exec}
Categories={args.categories or ''}
Comment={args.comment or ''}
Name={args.name}
Exec={args.chrome_command} "--user-data-directory={args.profile_directory}"'''
                    f''' "--app={args.url}"
Icon={args.icon}
''')
        subprocess.check_call(['update-desktop-database', apps_dir])
    elif is_mac:
        iconset_dir = mkdtemp(suffix='.iconset')
        for width in (2**x for x in range(1, 11)):
            subprocess.check_call([
                'sips', '-z',
                str(width),
                str(width), args.icon, '--out',
                path_join(iconset_dir, f'icon_{width}x{width}.png')
            ],
                                  stdout=subprocess.PIPE)
            subprocess.check_call([
                'sips', '-z',
                str(width),
                str(width), args.icon, '--out',
                path_join(iconset_dir, f'icon_{width//2}x{width//2}@2x.png')
            ],
                                  stdout=subprocess.PIPE)
        app_dir = expanduser(
            f'~/Applications/Chrome Apps.localized/{args.name}.app')
        contents_dir = path_join(app_dir, 'Contents')
        macos_dir = path_join(contents_dir, 'MacOS')
        res_dir = path_join(contents_dir, 'Resources')
        profile_dir_short = args.profile_directory.replace(' ', '')
        name_short = args.name.replace(' ', '')
        bundle_id = f'com.google.Chrome.app.{profile_dir_short}-{name_short}'
        info_plist_data = dict(
            CFBundleDevelopmentRegion='en',
            CFBundleExecutable='app_mode_loader',
            CFBundleIconFile='app.icns',
            CFBundleIdentifier=bundle_id,
            CFBundleInfoDictionaryVersion='6.0',
            CFBundleName=args.name,
            CFBundlePackageType='APPL',
            CFBundleShortVersionString='2019.10.11.39800',
            CFBundleSignature='????',
            CFBundleVersion='3904.50',
            LSEnvironment=dict(MallocNanoZone='0'),
            LSMinimumSystemVersion='10.10.0',
            NSAppleScriptEnabled=True,
            NSHighResolutionCapable=True,
        )
        for x in (contents_dir, macos_dir, res_dir):
            try:
                makedirs(x)
            except FileExistsError:
                pass
        subprocess.check_call([
            'iconutil', '-c', 'icns', iconset_dir, '-o',
            path_join(res_dir, 'app.icns')
        ],
                              stdout=subprocess.PIPE)
        script = path_join(macos_dir, 'app_mode_loader')
        with open(script, 'w+') as f:
            f.write('#!/usr/bin/env bash\n')
            f.write(f"open -n '{args.chrome_command}' --args "
                    f"'--app={args.url}' "
                    f'--user-data-directory={args.profile_directory}\n')
        chmod(script, 0o755)
        with open(path_join(contents_dir, 'Info.plist'), 'wb+') as f:
            plistlib.dump(info_plist_data, f)
        with open(path_join(contents_dir, 'PkgInfo'), 'w+') as f:
            f.write('APPL????')
    elif is_windows:
        # Generate a JScript file and run it
        fd, script_js = mkstemp(suffix='.js')
        close(fd)
        with open(script_js, 'w+') as f:
            f.write(f'''var ows = WScript.CreateObject('WScript.Shell');
var desktop = ows.SpecialFolders('Desktop');
var link = ows.CreateShortcut(desktop + '\\\\{args.name}.lnk');
link.WorkingDirectory = desktop;\n''')
            if is_msys and args.chrome_command.startswith('/'):
                args.chrome_command = fix_msys_arg(
                    subprocess.check_output(
                        ['cygpath', '-w',
                         args.chrome_command]).decode('utf-8').strip())
            default_icon = f'{args.chrome_command},0'
            props = dict(
                TargetPath=args.chrome_command,
                Arguments=fix_msys_arg(' '.join(
                    map(lambda x: f'"{x}"',
                        (f'--app={args.url}',
                         f'--user-data-directory={args.profile_directory}')))),
                IconLocation=fix_msys_arg(args.icon)
                if args.icon else default_icon,
                WindowStyle=args.window_style,
            )
            if args.comment:
                props['Description'] = args.comment
            if args.hotkey:
                props['Hotkey'] = args.hotkey
            for prop, val in props.items():
                if isinstance(val, str):
                    val = f"'{val}'"
                f.write(f"link.{prop} = {val};\n")
            f.write('link.Save();\n')
        try:
            subprocess.check_call(['cscript', '//Nologo', script_js])
        except subprocess.CalledProcessError as e:
            print(f'Caught exception: {e}', file=sys.stderr)
            with open(script_js, 'r') as f:
                print(f.read(), file=sys.stderr)
    else:
        raise RuntimeError('Should never get here')


if __name__ == '__main__':
    main()
