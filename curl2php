#!/usr/bin/env php
<?php
namespace Curl2Php;

function array_to_php_array_string(iterable $arr, ?int &$count)
{
    $arr = iterator_to_array($arr);
    $count = count($arr);
    $ret = json_encode($arr);
    if ($ret === '[]') {
        return "[\n]";
    }
    $ret = str_replace('\\/', '/', $ret);
    $ret = str_replace('","', "\",\n    \"", $ret);
    $ret = "\n" . '    '.substr($ret, 1, -1) . ",\n";

    return '[' . str_replace('"', "'", $ret) . ']';
}

function parse_headers(iterable $arr, bool $acceptEncoding = false)
{
    $lastWasHeaderPos = $lastWasDataPos = false;

    foreach ($arr as $i => $arg) {
        if ($lastWasHeaderPos) {
            $lastWasHeaderPos = false;
            continue;
        }

        if ($lastWasDataPos) {
            $lastWasDataPos = false;
            continue;
        }

        if ($arg === '-H' || $arg === '--header') {
            if (isset($arr[$i + 1])) {
                $parts = explode(':', $arr[$i + 1], 2);

                if (count($parts) !== 2) {
                    $errorMessage = ('Invalid header argument. Header ' .
                                        'must be of format: "Header-Name: ' .
                                        'EncodedValue"');
                    break;
                }

                $parts[0] = strtolower($parts[0]);

                if (!$acceptEncoding &&
                    $parts[0] === 'accept-encoding') {
                    continue;
                }

                yield ($parts[0] . ':' . $parts[1]);
            }

            $lastWasHeaderPos = true;
        }
    }
}

function get_data_argument(iterable $arr)
{
    foreach ($arr as $i => $arg) {
        if ($arg === '--data') {
            return $argv[$i + 1];
        }
    }

    return null;
}

function ifilter(iterable $arr, callable $cb) {
    foreach ($arr as $v) {
        if ($cb($v)) {
            yield $v;
        }
    }
}

/**
* Only -H, --header, and --data are supported.
*
* @param integer  $argc Argument count.
* @param iterable $argv Argument array.
*
* @return integer
*/
function main(int $argc, iterable $argv)
{
    $headers = parse_headers($argv);
    $postData = get_data_argument($argv);
    $url = ifilter(
        $argv,
        function ($x) {
            return filter_var(
                $x,
                FILTER_VALIDATE_URL,
                FILTER_NULL_ON_FAILURE
            );
        }
    );

    $cookie = '';
    $args = [$url->current()];
    $format = [
        '<?php',
        "\$ch = curl_init('%s');\n",
        'curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);',
    ];

    if ($cookie) {
        $args[] = $cookie;
        $format[] = 'curl_setopt($ch, CURLOPT_COOKIE, \'%s\');';
    }

    $header_args = array_to_php_array_string($headers, $count);
    if ($count) {
        $args[] = $header_args;
        $format[] = 'curl_setopt($ch, CURLOPT_HTTPHEADER, %s);';
    }

    if ($postData) {
        $args[] = $postData;
        $format[] = 'curl_setopt($ch, CURLOPT_POSTFIELDS, \'%s\');';
    }

    $format[] = "// curl_setopt(\$ch, CURLOPT_HEADER, true);\n";
    $format[] = "\$data = curl_exec(\$ch);\n";
    $format[] = "if (\$data[strlen(\$data) - 1] != \"\\n\") {";
    $format[] = "    \$data .= \"\\n\";";
    $format[] = "}";
    $format[] = "print(\$data);\n";

    return vsprintf(join("\n", $format), $args);
}

$val = main($argc, $argv);
if ($val) {
    print($val);
} else {
    exit(1);
}
