#!/usr/bin/env php
<?php
/**
 * Main class.
 */
class Curl2PhpMain
{
    private static function arrayToPhpArrayString(array $arr)
    {
        $ret = json_encode($arr);
        $ret = str_replace('\\/', '/', $ret); // stay compatible with older PHP versions
        $ret = str_replace('","', "\",\n    \"", $ret);

        $ret = "\n".'    '.substr($ret, 1, -1).",\n";

        return 'array('.str_replace('"', "'", $ret).')';
    }

    /**
    * Entry point.
    *
    * @param integer $argc Argument count.
    * @param array   $argv Argument array.
    *
    * @return integer
    */
    public static function main($argc, array $argv)
    {
        $headers = array();
        $cookie = '';
        $url = null;
        $isHeaderPos = false;
        $lastWasHeaderPos = $lastWasDataPos = false;
        $errorMessage = null;
        $stripAcceptEncodingHeader = true;
        $postData = '';

        array_shift($argv);

        // Only -H, --header, and --data are supported
        foreach ($argv as $i => $arg) {
            if ($lastWasHeaderPos) {
                $lastWasHeaderPos = false;
                continue;
            }

            if ($lastWasDataPos) {
                $lastWasDataPos = false;
                continue;
            }

            $isHeaderPos = $arg === '-H' || $arg === '--header';
            $isDataPos = $arg === '--data';

            if ($isHeaderPos) {
                if (isset($argv[$i + 1])) {
                    $parts = explode(':', $argv[$i + 1], 2);

                    if (count($parts) !== 2) {
                        $errorMessage = 'Invalid header argument. Header must be of format: "Header-Name: EncodedValue"';
                        break;
                    }

                    $parts[0] = strtolower($parts[0]);

                    if ($stripAcceptEncodingHeader && $parts[0] === 'accept-encoding') {
                        continue;
                    }

                    if ($parts[0] === 'cookie') {
                        $cookie = $parts[1];
                        continue;
                    }

                    $headers[] = $parts[0].':'.$parts[1];
                }

                $lastWasHeaderPos = true;
                continue;
            }

            if ($isDataPos) {
                if (isset($argv[$i + 1])) {
                    $postData = $argv[$i + 1];
                }
            }

            if ($url === null) {
                $url = filter_var($arg, FILTER_VALIDATE_URL, FILTER_NULL_ON_FAILURE);
            }
        }

        if ($errorMessage) {
            fprintf(STDERR, $errorMessage."\n");

            return 1;
        }

        if ($url === null) {
            fprintf(STDERR, 'No URL was given'."\n");

            return 1;
        }

        $args = array($url);
        $format = array(
            '<?php',
            "\$ch = curl_init('%s');\n",
            'curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);',
        );

        if ($cookie) {
            $args[] = $cookie;
            $format[] = 'curl_setopt($ch, CURLOPT_COOKIE, \'%s\');';
        }
        if ($headers) {
            $args[] = static::arrayToPhpArrayString($headers);
            $format[] = 'curl_setopt($ch, CURLOPT_HTTPHEADER, %s);';
        }
        if ($postData) {
            $args[] = $postData;
            $format[] = 'curl_setopt($ch, CURLOPT_POSTFIELDS, \'%s\');';
        }

        $format[] = "// curl_setopt(\$ch, CURLOPT_HEADER, true);\n";
        $format[] = "\$data = curl_exec(\$ch);\n";
        $format[] = "print(\$data);\n";

        vprintf(join("\n", $format), $args);

        return 0;
    }
}

exit(Curl2PhpMain::main($argc, $argv));
