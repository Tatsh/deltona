#!/usr/bin/env python
from datetime import datetime
from logging.handlers import SysLogHandler
from os.path import realpath
import argparse
import logging
import signal
import subprocess as sp
import sys

try:
    import yaml
    HAS_YAML = True
except ImportError:
    HAS_YAML = False

LOG_FORMATTER = logging.Formatter('%(asctime)s - %(message)s')

logfh = None
logyamlfh = None
syslogh = None


def speedtest(*args, **kwargs) -> sp.CompletedProcess:
    kwargs['check'] = True
    kwargs['capture_output'] = True
    return sp.run(('speedtest', ) + args, **kwargs)


def cleanup():
    global logfh, syslogh
    if logfh:
        logfh.close()
    if logyamlfh:
        logyamlfh.close()
    if syslogh:
        syslogh.close()
    logging.shutdown()


def cleanup_and_exit(status=0):
    cleanup()
    sys.exit(status)


def ctrl_c(signum, frame):
    cleanup()
    raise SystemExit('Signal raised')


def maybe_log_yaml(**kwargs):
    if logyamlfh:
        kwargs['time'] = str(datetime.today())
        logyamlfh.write(
            yaml.safe_dump([kwargs],
                           default_flow_style=False,
                           allow_unicode=True))


def get_line_value(s: str) -> str:
    return s.split(':')[1].strip().split(' ')[0].strip()


if __name__ == '__main__':
    signal.signal(signal.SIGINT, ctrl_c)
    logger = logging.getLogger('speedtest')
    logger.setLevel(logging.INFO)
    parser = argparse.ArgumentParser()
    parser.add_argument('-d', '--download-threshold', default=50, type=float)
    parser.add_argument('-u', '--upload-threshold', default=5, type=float)
    parser.add_argument('-p', '--ping-threshold', default=30, type=float)
    parser.add_argument('-s', '--syslog', action='store_true')
    parser.add_argument('-l', '--log-file', help='Debug log')
    parser.add_argument('-v', '--verbose', action='store_true')
    args = parser.parse_args()
    ping = dl = ul = share = None
    failed = False
    if args.log_file:
        args.log_file = realpath(args.log_file)
        logfh = open(args.log_file, 'a+')
        if HAS_YAML:
            logyamlfh = open(args.log_file + '.yml', 'a+')
        channel = logging.StreamHandler(logfh)
        channel.setFormatter(LOG_FORMATTER)
        channel.setLevel(logging.DEBUG)
        logger.addHandler(channel)
    if args.syslog:
        syslogh = SysLogHandler(address='/dev/log')
        syslogh.setFormatter(LOG_FORMATTER)
        syslogh.setLevel(logging.INFO)
        logger.addHandler(syslogh)
    if args.verbose:
        channel = logging.StreamHandler(sys.stdout)
        channel.setFormatter(LOG_FORMATTER)
        channel.setLevel(logging.INFO)
        logger.addHandler(channel)
    logger.info('Running `speedtest --share --simple`')
    try:
        for line in speedtest('--share',
                              '--simple').stdout.decode('utf-8').split('\n'):
            if line.startswith('Ping: '):
                ping = float(get_line_value(line))
            elif line.startswith('Download: '):
                dl = float(get_line_value(line))
            elif line.startswith('Upload: '):
                ul = float(get_line_value(line))
            elif line.startswith('Share results: '):
                share = ':'.join(line.split(':')[1:]).strip()
    except sp.CalledProcessError as e:
        logger.error('speedtest failed to run')
        if e.stderr:
            logger.error(e.stderr.decode('utf-8'))
        cleanup_and_exit(status=1)
    if ping > args.ping_threshold:
        logger.error(
            'Ping threshold higher than threshold. Got %0.03f, '
            'wanted at most %.03f.', ping, args.ping_threshold)
        failed = True
    if dl < args.download_threshold:
        logger.error(
            'Download speed threshold lower than threshold. '
            'Got %.03f, wanted at least %0.03f.', dl, args.download_threshold)
        failed = True
    if ul < args.upload_threshold:
        logger.error(
            'Upload speed threshold lower than threshold. '
            'Got %.03f, wanted at least %0.03f.', ul, args.upload_threshold)
        failed = True
    logger.info('Ping: %0.03f ms', ping)
    logger.info('Download speed: %0.02f Mb/s', dl)
    logger.info('Upload speed: %0.02f Mb/s', ul)
    logger.info('Share URI: %s', share)
    maybe_log_yaml(ping=ping, download=dl, upload=ul, share_uri=share)
    if True in (not x for x in (
            ping,
            dl,
            ul,
            share,
    )):
        logger.error('Output not as expected (other error)')
        cleanup_and_exit(status=1)
    if failed:
        logger.error('Exiting with status 1')
        cleanup_and_exit(status=1)
    cleanup_and_exit()
