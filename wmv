#!/usr/bin/env python
import argparse
import subprocess as sp
import sys

tr_map = (
    ('　', ' '),
    ('…', '...'),
    ('！', '!'),
    ('？', '?'),
    ('～', '~'),
    ('（', '('),
    ('）', ')'),
    ('＂', '"'),
    ('＃', '#'),
    ('＄', '$'),
    ('％', '%'),
    ('＆', '&'),
    ('＇', "'"),
    ('＊', '*'),
    ('，', ','),
    ('－', '-'),
    ('．', '.'),
    ('／', '/'),
    ('０', '0'),
    ('１', '1'),
    ('２', '2'),
    ('３', '3'),
    ('４', '4'),
    ('５', '5'),
    ('６', '6'),
    ('７', '7'),
    ('８', '8'),
    ('９', '9'),
    ('：', ':'),
    ('；', ';'),
    ('＜', '<'),
    ('＝', '='),
    ('＞', '>'),
    ('？', '?'),
    ('＠', '@'),
    ('Ａ', 'A'),
    ('Ｂ', 'B'),
    ('Ｃ', 'C'),
    ('Ｄ', 'D'),
    ('Ｅ', 'E'),
    ('Ｆ', 'F'),
    ('Ｇ', 'G'),
    ('Ｈ', 'H'),
    ('Ｉ', 'I'),
    ('Ｊ', 'J'),
    ('Ｋ', 'K'),
    ('Ｌ', 'L'),
    ('Ｍ', 'M'),
    ('Ｎ', 'N'),
    ('Ｏ', 'O'),
    ('Ｐ', 'P'),
    ('Ｑ', 'Q'),
    ('Ｒ', 'R'),
    ('Ｓ', 'S'),
    ('Ｔ', 'T'),
    ('Ｕ', 'U'),
    ('Ｖ', 'V'),
    ('Ｗ', 'W'),
    ('Ｘ', 'X'),
    ('Ｙ', 'Y'),
    ('Ｚ', 'Z'),
    ('［', '['),
    ('＼', '\\'),
    ('］', ']'),
    ('＾', '^'),
    ('＿', '_'),
    ('｀', '`'),
    ('ａ', 'a'),
    ('ｂ', 'b'),
    ('ｃ', 'c'),
    ('ｄ', 'd'),
    ('ｅ', 'e'),
    ('ｆ', 'f'),
    ('ｇ', 'g'),
    ('ｈ', 'h'),
    ('ｉ', 'i'),
    ('ｊ', 'j'),
    ('ｋ', 'k'),
    ('ｌ', 'l'),
    ('ｍ', 'm'),
    ('ｎ', 'n'),
    ('ｏ', 'o'),
    ('ｐ', 'p'),
    ('ｑ', 'q'),
    ('ｒ', 'r'),
    ('ｓ', 's'),
    ('ｔ', 't'),
    ('ｕ', ''),
    ('ｖ', 'v'),
    ('ｗ', 'w'),
    ('ｘ', 'x'),
    ('ｙ', 'y'),
    ('ｚ', 'z'),
    ('｛', '{'),
    ('｜', '|'),
    ('｝', '}'),
    ('｟', '⸨'),
    ('｠', '⸩'),
    ('￠', '¢'),
    ('￡', '£'),
    ('￢', '¬'),
    ('￣', '‾'),
    ('￤', '|'),
    ('￥', '¥'),
    ('￦', '₩'),
)


def make_target(filename):
    for find, replace in tr_map:
        filename = filename.replace(find, replace)
    return filename


def main() -> int:
    parser = argparse.ArgumentParser(
        description='Renames file names with full-width characters to normal '
        'width name. Please see `man mv` or `info coreutils \'mv invocation\'`'
        ' for option arguments')
    # ilm mv | grep -E '^‘\-' | cut -c 2- | sed -e "s/’$//"
    parser.add_argument('--backup')
    parser.add_argument('-b', action='store_true')
    parser.add_argument('-f', '--force', action='store_true')
    parser.add_argument('-i', '--interactive', action='store_true')
    parser.add_argument('-n', '--no-clobber', action='store_true')
    parser.add_argument('-u', '--update', action='store_true')
    parser.add_argument('-v', '--verbose', action='store_true')
    parser.add_argument('--strip-trailing-slashes', action='store_true')
    parser.add_argument('-S', '--suffix')
    parser.add_argument('-t', '--target-directory')
    parser.add_argument('-T', '--no-target-directory', action='store_true')
    parser.add_argument('file', metavar='SOURCE', nargs=1, help='Source')
    args = parser.parse_args()
    special_values = (
        ('--backup', args.backup),
        ('--suffix', args.suffix),
        ('--target-directory', args.target_directory),
    )
    bool_args = (
        ('--backup', args.b),
        ('--force', args.force),
        ('--interactive', args.interactive),
        ('--no-clobber', args.no_clobber),
        ('--update', args.update),
        ('--strip-trailing-slashes', args.strip_trailing_slashes),
    )
    mv_args = []
    if args.b and args.backup:
        print('Cannot use -b and --backup simulateously')
        sys.exit(1)
    for arg, val in special_values:
        if type(val) is str:
            mv_args.append(f'{arg}={val}')
    for arg, val in bool_args:
        if val is True:
            mv_args.append(arg)
    command = ['mv'] + mv_args + [args.file[0], make_target(args.file[0])]
    p = sp.run(command, stdout=sp.PIPE, stderr=sp.PIPE, encoding='utf-8')
    if p.returncode:
        print(f'STDOUT: {p.stdout}')
        print(f'STDERR: {p.stderr}', file=sys.stderr)
        return p.returncode
    elif '-v' in mv_args or '--verbose' in mv_args:
        print(p.stdout)
    return 0


if __name__ == '__main__':
    sys.exit(main())
