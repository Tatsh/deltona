#!/usr/bin/env python
# -*- coding: utf-8 -*-

from __future__ import print_function, unicode_literals
from multiprocessing import Manager, Pool, Process
from os import mkdir, remove as rm, rename
from os.path import basename, dirname, expanduser, isdir, join as path_join, \
    realpath, splitext
from osext.filesystem import isfile
try:
    from plistlib import readPlistFromBytes
except ImportError:
    from biplist import readPlistFromString as readPlistFromBytes
import argparse
import re
import sys

from sh import (
    idevice_id,
    ideviceinfo,
    ideviceinstaller,
    unzip,
    ErrorReturnCode_255,
    ErrorReturnCode_128,
)

verbose = False


class AppNameOrVersionError(Exception):
    pass


class AppPropertyError(Exception):
    pass


def vprint(str, stderr=False):
    global verbose

    which = sys.stdout
    if stderr:
        which = sys.stderr

    if verbose:
        print(str, file=which)


def can_unzip(filename):
    try:
        vprint('Testing unzip of %s' % (basename(filename),))
        unzip(['-t', filename])
    except:
        return False

    return True


def get_app_name(app_info):
    keys = (
        'CFBundleDisplayName',
        'CFBundleName',
        'CFBundleExecutable',
        'CFBundleIdentifier',
    )
    name = None

    for key in keys:
        if key not in app_info:
            continue

        name = app_info[key].strip()

        if not name:
            continue
        else:
            break

    if not name:
        raise AppNameOrVersionError('Unable to get an application name %s' %
                                    (app_info,))

    return name


def get_app_version(app_info):
    try:
        val = app_info['CFBundleShortVersionString'].strip()

        if val:
            return val
    except KeyError:
        val = app_info['CFBundleVersion'].strip()

        if val:
            return val

    raise AppNameOrVersionError('get_app_version()')


def get_device_family(app_info):
    device_families = app_info['UIDeviceFamily']
    if len(device_families) == 1:
        family = device_families[0]

        # Sometimes these values are not longs, but instead strings
        # (NSString of course)
        if isinstance(family, str):
            family = int(family)

        if family == 2:
            device_family = 'ipad'
        elif family == 1:
            device_family = 'iphone'  # iPhone/iPod Touch only app
        else:
            print('What do you have plugged in? An Apple TV? Skipping this '
                  'app', file=sys.stderr)
            raise AppPropertyError('get_device_family()')
    else:
        device_family = 'universal'

    return device_family


def get_output_filename(app_info):
    try:
        return '%s %s.ipa' % (
            get_app_name(app_info),
            get_app_version(app_info),
        )
    except UnicodeEncodeError as e:
        print('UnicodeEncodeError with name or version key (%s)' % (
            app_info['CFBundleIdentifier'],
        ), file=sys.stderr)
        raise e

    raise AppNameOrVersionError('get_output_filename()')


def get_ipa(*args):
    kwargs = args[0]
    app_info = kwargs.pop('app_info')
    failed_to_copy_arr = kwargs.pop('failed_to_copy_array')

    name = get_app_name(app_info)
    output_fn = get_output_filename(app_info)
    device_family = get_device_family(app_info)
    bundle_name = app_info['CFBundleIdentifier']
    device_family_dir = path_join(target_dir, device_family)
    full_path = path_join(device_family_dir, output_fn)
    version = get_app_version(app_info)

    if verbose:
        for key in sorted(app_info.keys()):
            vprint('    %s: %s' % (key, app_info[key],))

    vprint('%s: Removing archive if it already exists' % (bundle_name,))
    try:
        ideviceinstaller(['-R', bundle_name])
    except ErrorReturnCode_128 as e:
        # As of 2014-08-20, ab04a35 of ideviceinstaller
        if 'APIInternalError' not in e.stdout.decode('utf-8'):
            raise e

    if isfile(full_path) and can_unzip(full_path):
        print('%s already exists, skipping' % (output_fn), file=sys.stderr)
        return

    if not isdir(device_family_dir):
        mkdir(device_family_dir)

    name_version_str = 'Name: "%s", version: %s -> "%s"' % (
        name, version,
        output_fn,
    )
    print(name_version_str, file=sys.stderr)

    current_ipa_name = path_join(target_dir, bundle_name + '.ipa')
    cmd = ['-u', udid,
           '-a', bundle_name,
           '-o', 'app_only',
           '-o remove',
           '-o', 'copy=%s' % (target_dir)]
    print('Copying %s' % (bundle_name,), file=sys.stderr)
    try:
        output = ideviceinstaller(cmd)
    except KeyboardInterrupt:
        print('Caught interrupt. Deleting %s if it exists' %
              (current_ipa_name,), file=sys.stderr)
        if isfile(current_ipa_name):
            rm(current_ipa_name)
        return

    vprint(output.strip())

    try:
        assert(isfile(current_ipa_name))
    except AssertionError:
        failed_to_copy_arr.append(name_version_str)
        return

    print('Verifying %s' % (current_ipa_name,), file=sys.stderr)
    try:
        if not can_unzip(current_ipa_name):
            print('Failed to transfer application with bundle name: %s' % (
                bundle_name,
            ), file=sys.stderr)
            rm(current_ipa_name)
            return
    except KeyboardInterrupt:
        print('Caught interrupt. Deleting %s if it exists' %
              (current_ipa_name,), file=sys.stderr)
        if isfile(current_ipa_name):
            rm(current_ipa_name)
        return

    rename(current_ipa_name, full_path)

if __name__ == '__main__':
    devices = []
    device_list = []
    parser = argparse.ArgumentParser()
    default_device = None

    try:
        for udid in idevice_id('-l', _iter=True):
            udid = udid.strip()
            name = None

            for line in ideviceinfo(['-u', udid], _iter=True):
                if re.match('^DeviceName\: ', line):
                    name = line.strip()[12:]

            device_list.append((name.strip(), udid.strip(),))

            if len(device_list) == 1:
                default_device = device_list[0][0]
    except ErrorReturnCode_255:
        pass

    parser.add_argument('-d', '--device', default=default_device,
                        metavar='DEVICE_NAME',
                        help='Device name (case sensitive)')
    parser.add_argument('-t', '--target', required=True)
    parser.add_argument('-v', '--verbose', action='store_true')

    args = parser.parse_args()
    verbose = args.verbose
    udid = None
    target_dir = realpath(args.target)
    failed_to_copy = []

    if not isdir(target_dir):
        print('Target directory must exist', file=sys.stderr)
        sys.exit(1)

    if args.device is None:
        print('You must pick a device to use (multiple ones are '
              'plugged in or are in the configuration file)')
        for (name, udid) in devices:
            print('%s (%s)' % (name, udid,))
        sys.exit(1)

    udid = None
    for (name, u) in device_list:
        if name == args.device:
            udid = u
            break

    if not udid:
        print('Could not find UDID for %s' % (args.device,), file=sys.stderr)
        sys.exit(1)

    vprint('Working with device "%s"' % (args.device,))

    old_lines = ideviceinstaller(['-u', udid, '-l', '-o', 'xml'])
    old_lines = old_lines.strip().splitlines()
    lines = []
    skip_next = False

    # This may be an iOS 8 issue with ideviceinstaller, where this key
    # NSContactsUsageDescription appears twice in some dictionaries or has an
    # invalid value
    for line in old_lines:
        if skip_next:
            skip_next = False
            continue
        if '<key>NSContactsUsageDescription</key>' in line:
            skip_next = True
            continue
        lines.append(line)

    lines = '\n'.join(lines)

    try:
        full_info = readPlistFromBytes(lines.encode('utf-8'))
    except ValueError as e:
        if 'unexpected element at line' in e.args[0]:
            bad_line = int(re.sub(r'^unexpected element at line (\d+)', r'\1',
                                  e.args[0]))
            for (i, line) in enumerate(lines.splitlines()[0:bad_line + 5]):
                if i == bad_line:
                    print('ERROR %d:%s' % (i, line,), file=sys.stderr)
                print('%d:%s' % (i, line,), file=sys.stderr)
            sys.exit(1)
        else:
            raise e

    pool = Pool()
    manager = Manager()
    failed_to_copy_arr = manager.list()
    arg_set = []

    for app_info in full_info:
        arg_set.append(dict(
            target_dir=target_dir,
            app_info=app_info,
            failed_to_copy_array=failed_to_copy_arr,
        ))
    pool.map(get_ipa, arg_set)

    if len(failed_to_copy_arr):
        print('\nThe following failed to copy!', file=sys.stderr)
        for line in failed_to_copy:
            print(line, file=sys.stderr)
        sys.exit(1)
