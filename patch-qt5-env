#!/usr/bin/env python
from os.path import basename
from pathlib import Path
from typing import Any, Dict, Optional
import logging
import plistlib
import sys

ENVIRONMENT_VARS_KEY = 'LSEnvironment'
QT_QPA_PLATFORMTHEME = 'QT_QPA_PLATFORMTHEME'

log: Optional[logging.Logger] = None


def setup_logging_stdout(name: Optional[str] = None,
                         level: int = logging.WARNING) -> None:
    global log
    name = name if name else basename(sys.argv[0])
    log = logging.getLogger(name)
    log.setLevel(level)
    channel = logging.StreamHandler(sys.stdout)
    channel.setFormatter(logging.Formatter('%(asctime)s - %(message)s'))
    channel.setLevel(level)
    log.addHandler(channel)


def main() -> int:
    setup_logging_stdout()
    assert log is not None
    for fin in sys.argv[1:]:
        p = Path(fin).joinpath('Contents', 'Info.plist')
        if not p.exists():
            log.warning('Skipping %s (Info.plist not found)', fin)
            continue
        with p.open('rb') as f:
            data: Dict[str, Any] = plistlib.load(f)
            if ENVIRONMENT_VARS_KEY not in data:
                data[ENVIRONMENT_VARS_KEY] = {}
            data[ENVIRONMENT_VARS_KEY][QT_QPA_PLATFORMTHEME] = ''
        with p.open('wb') as f:
            plistlib.dump(data, f, sort_keys=False)
        p.touch()
        log.info('Rewrote Info.plist for %s', fin)
    return 0


if __name__ == '__main__':
    sys.exit(main())
