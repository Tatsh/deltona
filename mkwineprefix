#!/usr/bin/env python
from os import devnull, environ, makedirs
from os.path import basename, expanduser, isdir, join as path_join
from shlex import quote
from shutil import rmtree
from typing import Optional
import argparse
import logging
import subprocess as sp
import sys

_VERSION_MAPPING = {
    '10': 'win10',
    'vista': 'vista',
    '2k3': 'win2k3',
    '7': 'win7',
    '8': 'win8',
    'xp': 'winxp',
    '81': 'win81',
    # 32-bit only
    '2k': 'win2k',
    '98': 'win98',
    '95': 'win95'
}
log: Optional[logging.Logger] = None


def setup_logging_stdout(name: Optional[str] = None,
                         verbose: bool = False) -> None:
    global log
    name = name if name else basename(sys.argv[0])
    log = logging.getLogger(name)
    log.setLevel(logging.DEBUG if verbose else logging.INFO)
    channel = logging.StreamHandler(sys.stdout)
    channel.setFormatter(logging.Formatter('%(message)s'))
    channel.setLevel(logging.DEBUG if verbose else logging.INFO)
    log.addHandler(channel)


def wine(args: argparse.Namespace) -> int:
    setup_logging_stdout()
    assert log is not None
    prefix_name: str = args.prefix_name
    prefix_root = expanduser('~/.local/share/wineprefixes')
    makedirs(prefix_root, mode=0o755, exist_ok=True)
    target = path_join(prefix_root, prefix_name)
    o_target = target
    if isdir(target):
        log.error('Not touching existing prefix at %s', target)
        return 1
    arch = 'win32' if args.thirty2bit else 'win64'
    env = dict(WINEPREFIX=target,
               DISPLAY=environ.get('DISPLAY', ''),
               XAUTHORITY=environ.get('XAUTHORITY', ''),
               WINEARCH=environ.get('WINEARCH', arch))
    if not env['DISPLAY']:
        env['DISPLAY'] = ':0'
    if args.no_xdg:
        try:
            sp.check_call([
                'wine', 'reg', 'add', r'HKCU\Software\Wine\DllOverrides', '/t',
                'REG_SZ', '/v', 'winemenubuilder.exe', '/f'
            ],
                          env=env,
                          stdout=open(devnull, 'w'),
                          stderr=sp.STDOUT)
        except (sp.CalledProcessError, KeyboardInterrupt):
            rmtree(o_target)
            return 1
    target = quote(target)
    winetricks = sp.check_output(['which', 'winetricks'],
                                 encoding='utf-8').strip()
    if not winetricks:
        log.error('Winetricks is not installed.')
        return 1
    prefix_arg = 'prefix={}'.format(prefix_name)
    winetricks_args = [
        winetricks, prefix_arg, _VERSION_MAPPING[args.windows_version[0]]
    ]
    if args.sandbox:
        winetricks_args.append('isolate_home')
        winetricks_args.append('sandbox')
    if args.vd != 'off':
        winetricks_args.append('vd={}'.format(args.vd[0]))
    try:
        sp.check_output(winetricks_args,
                        encoding='utf-8',
                        env=dict(WINEPREFIX=o_target,
                                 HOME=environ['HOME'],
                                 DISPLAY=environ.get('DISPLAY', ''),
                                 XAUTHORITY=environ.get('XAUTHORITY', '')))
    except sp.CalledProcessError as e:
        log.warning('Winetricks exit code was %d but it may have succeeded',
                    e.returncode)
        log.warning('%s', e.output)
    except KeyboardInterrupt:
        rmtree(o_target)
        return 1
    wineprefix_env = quote('WINEPREFIX={}'.format(target))
    print(f'''Run `export WINEPREFIX={target}` before running wine or use env:

env {wineprefix_env} wine ...

If you ran this with eval, your shell is ready.''',
          file=sys.stderr)
    print(f'export {wineprefix_env}')
    ps1_env = f'PS1={prefix_name}üç∑$PS1'
    print(f'export {ps1_env}')
    return 0


def main():
    parser = argparse.ArgumentParser(
        description='Create a Wine prefix with custom settings',
        epilog='This should be used with eval: eval $(mkwineprefix ...)')
    parser.add_argument('--no-xdg',
                        action='store_true',
                        help='Disable winemenubuilder.exe')
    parser.add_argument('--32',
                        help='Use 32-bit prefix',
                        dest='thirty2bit',
                        action='store_true')
    parser.add_argument('-V',
                        '--windows-version',
                        default=['xp'],
                        help='Windows version',
                        nargs=1,
                        choices=_VERSION_MAPPING.keys())
    parser.add_argument('-S',
                        '--sandbox',
                        action='store_true',
                        help='Sandbox the prefix')
    parser.add_argument('--vd',
                        metavar='SIZE',
                        nargs=1,
                        default='off',
                        help='Virtual desktop size, e.g. 1024x768.')
    parser.add_argument('prefix_name')
    args = parser.parse_args()
    return wine(args)


if __name__ == '__main__':
    sys.exit(main())
