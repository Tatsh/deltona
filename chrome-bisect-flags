#!/usr/bin/env python
from argparse import Namespace
from copy import deepcopy
from pprint import pprint
from time import sleep
from typing import Sequence, TypedDict, cast
import argparse
import json
import subprocess as sp
import sys


class LocalStateBrowser(TypedDict):
    enabled_labs_experiments: Sequence[str]


class LocalState(TypedDict):
    browser: LocalStateBrowser


def start_test(flags: Sequence[str], ls: LocalState, sn: str, ls_path: str,
               sleep_time: float) -> bool:
    """
    Returns ``True`` if:
    - there are no more flags (problem flag not found)
    - if there is only one flag left (problem flag possibly found)
    - if the problematic flag exists within the passed in flags
    """
    l = len(flags)
    if l == 0:
        print('Could not find the problem flag', file=sys.stderr)
        return True
    if l == 1:
        print('\nFlag most likely to blame:')
        print(f'\n  {flags[0]}\n')
        return True
    print('Testing flags:')
    for flag in flags:
        print(f'- {flag}')
    ls['browser']['enabled_labs_experiments'] = flags
    with open(ls_path, 'w+') as f:
        json.dump(ls, f)
    input('Start browser and test for the issue, then press enter')
    sp.run(('killall', sn), stderr=sp.PIPE, stdout=sp.PIPE)
    sleep(sleep_time)
    return input('Did the problem occur? ').lower().startswith('y')


def do_test(flags: Sequence[str], ls_path: str, sn: str, sleep_time: float, ls: LocalState) -> None:
    l = len(flags)
    if l < 2:
        return
    if start_test(flags[:l // 2], deepcopy(ls), sn, ls_path, sleep_time):
        do_test(flags[:l // 2], ls_path, sn, sleep_time, ls)
        return
    if start_test(flags[l // 2:], deepcopy(ls), sn, ls_path, sleep_time):
        do_test(flags[l // 2:], ls_path, sn, sleep_time, ls)
        return


class Args(Namespace):
    local_state_path: str
    subprocess_name: str
    sleep_time: float


def main() -> int:
    parser = argparse.ArgumentParser()
    parser.add_argument('local_state_path', help='Path to "Local State" file')
    parser.add_argument('-s',
                        '--subprocess-name',
                        default='chrome',
                        help='Chromium-based browser subprocess name such as "chrome"')
    parser.add_argument(
        '--sleep-time',
        default=0.5,
        type=float,
        help='Time to sleep after attempting to kill the browser processes in seconds.')
    args = cast(Args, parser.parse_args())
    with open(args.local_state_path, 'r') as f:
        ls = json.load(f)
        flags = ls['browser']['enabled_labs_experiments']
        l = len(flags)
        if l == 0:
            print('Nothing to test', file=sys.stderr)
            return 1
    input('Exit the browser and press any key')
    do_test(flags, args.local_state_path, args.subprocess_name, args.sleep_time, ls)
    return 0


if __name__ == '__main__':
    sys.exit(main())
