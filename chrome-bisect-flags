#!/usr/bin/env python
from collections.abc import Sequence
from copy import deepcopy
from pathlib import Path
from time import sleep
from typing import TypedDict
import json
import subprocess as sp
import sys

import click


class LocalStateBrowser(TypedDict):
    enabled_labs_experiments: Sequence[str]


class LocalState(TypedDict):
    browser: LocalStateBrowser


try:
    DEFAULT_LOCAL_STATE_PATH: str | None = str(
        Path('~/.config/google-chrome/Local State').expanduser().resolve(strict=True))
except FileNotFoundError:
    DEFAULT_LOCAL_STATE_PATH = None
FLAGS_MIN_LENGTH = 2


def start_test(flags: Sequence[str], local_state: LocalState, subprocess_name: str, ls_path: str,
               sleep_time: float) -> tuple[bool, str | None]:
    """
    Test apparatus.

    Returns ``True`` if:
    - there are no more flags (problem flag not found)
    - if there is only one flag left (problem flag possibly found)
    - if the problematic flag exists within the passed in flags
    """
    len_flags = len(flags)
    if len_flags == 0:
        click.echo('Could not find the problem flag.', err=True)
        return True, None
    click.echo('Testing flags:')
    for flag in flags:
        click.echo(f'- {flag}')
    local_state['browser']['enabled_labs_experiments'] = flags
    with Path(ls_path).open('w+', encoding='utf-8') as f:
        json.dump(local_state, f, allow_nan=False)
    click.confirm('Start browser and test for the issue, then press enter', show_default=False)
    sp.run(('killall', subprocess_name), capture_output=True, check=False)
    sleep(sleep_time)
    at_fault = click.confirm('Did the problem occur?')
    return at_fault, flags[0] if at_fault and len_flags == 1 else None


def do_test(flags: Sequence[str], ls_path: str, subprocess_name: str, sleep_time: float,
            local_state: LocalState) -> str | None:
    len_flags = len(flags)
    if len_flags < FLAGS_MIN_LENGTH:
        return flags[0] if len_flags == 1 else None
    done, bad_flag = start_test(flags[:len_flags // 2], deepcopy(local_state), subprocess_name,
                                ls_path, sleep_time)
    if done:
        return bad_flag or do_test(flags[:len_flags // 2], ls_path, subprocess_name, sleep_time,
                                   local_state)
    done, bad_flag = start_test(flags[len_flags // 2:], deepcopy(local_state), subprocess_name,
                                ls_path, sleep_time)
    if done:
        return bad_flag or do_test(flags[len_flags // 2:], ls_path, subprocess_name, sleep_time,
                                   local_state)
    return None


@click.command()
@click.argument('local_state_path',
                type=click.Path(dir_okay=False, exists=True),
                metavar='LOCAL_STATE_PATH',
                default=DEFAULT_LOCAL_STATE_PATH)
@click.option('-s',
              '--subprocess-name',
              default='chrome',
              help='Chromium-based browser subprocess name such as "chrome"')
@click.option('--sleep-time',
              default=0.5,
              type=float,
              help='Time to sleep after attempting to kill the browser processes in seconds.')
def main(local_state_path: str, subprocess_name: str = 'chrome', sleep_time: float = 0.5) -> None:
    """
    Determine which flag is causing an issue in Chrome or any Chromium-based browser.

    Only supports removing flags (setting back to default) and not setting them to 'safe' values.
    """
    p_ls = Path(local_state_path)
    click.echo(f'Using "{local_state_path}"', err=True)
    with p_ls.open(encoding='utf-8') as f:
        local_state_data = json.load(f)
        flags = local_state_data['browser']['enabled_labs_experiments']
        len_flags = len(flags)
        if len_flags == 0:
            click.echo('Nothing to test.', err=True)
            raise click.Abort
    bad_flag = None
    try:
        click.confirm('Exit the browser and press enter', show_default=False)
        bad_flag = do_test(flags, local_state_path, subprocess_name, sleep_time, local_state_data)
    except KeyboardInterrupt as e:
        raise click.Abort from e
    finally:
        if bad_flag:
            local_state_data['browser']['enabled_labs_experiments'] = [
                x for x in local_state_data['browser']['enabled_labs_experiments'] if x != bad_flag
            ]
        with p_ls.open('w+', encoding='utf-8') as f:
            json.dump(local_state_data, f, sort_keys=True, indent=2, allow_nan=False)
        if not bad_flag:
            click.echo('Restored original "Local State".', err=True)
        else:
            click.echo(f'Saved "Local State" with "{bad_flag}" removed.', err=True)


if __name__ == '__main__':
    sys.exit(main())
