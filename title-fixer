#!/usr/bin/env python

from __future__ import print_function
import argparse
import re
import sys

ENGLISH_MODE = 0x1
JAPANESE_MODE = 0x10
CHINESE_MODE = 0x100
ARABIC_MODE = 0x1000

english_ordinal_regex = r'(\d+)(st|nd|rd|th)'

# non-strict, not including words like below, forms of to be, forms of
#   you/he/etc, or words like 'call'
stop_words = [
    'a',
    'an',
    'and',
    'at',
    'by',
    'de',  # mainly for Spanish and French
    'el',  # Spanish
    'feat',
    'featuring',
    'for',
    'from',
    'il',  # Italian
    'in',
    'into',
    'la',  # Spanish/French/Italian
    'lo',  # Italian
    'of',
    'off',
    'on',
    'or',
    'per',
    'por',  # Spanish
    # 'so',
    'te',  # Spanish/French
    # 'than',
    'the',
    # 'then',
    # 'this',
    'to',
    # 'too',
    'van',
    'via',
    'von',
    'vs',
    'with',
    'within',
    'without',
]

# English abbreviations for period removal
english_abbrev = [
    'feat',
    'mr',
    'mrs',
    'ms',
    'vs',
]

# Only really common ones
japanese_particles = [
    'de',
    'e',
    'ga',
    'ha',
    'ka',
    'kana',
    'ne',
    'ni',
    'no',
    'to',
    'wa',
    'wo',
]

chinese_particles = [
    'de',
    'ge',
    'he',
    'le',
    'ma',
]

# NOTE This list is not yet complete
arabic_stops = [
    'al',
    'li',
    'laka',
    'lahu',
    'fi',
    'fiya',
    'fika',
    'fihi',
    'bi',
    'biha',
    'bika',
    'bihi',
    'ila',
    'ilayya',
    'ilayka',
    'ilayhi',
    'ala',
    'alayya',
    'alayka',
    'alayhi',
    'maa',
    'mai',
    'maaka',
    'maahu',
    'min',
    'minni',
    'minka',
    'minhu',
    'an',
    'anni',
    'anka',
    'anhu',
    'wa',
]

names = {
    'S3RL': 'S3RL',
    'mcdonald': 'McDonald',
    'mcdonald\'s': 'McDonald\'s',
    'mcdonalds': 'McDonald\'s',
    'Itunes': 'iTunes',
    'Tvos': 'tvOS',
    'Watchos': 'watchOS',
    'Macos': 'macOS',
    'Ios': 'iOS',  # Not Cisco IOS
    'Pdfkit': 'PDFKit',
    'Imessage': 'iMessage',
    'Sirikit': 'SiriKit',
    'Mapkit': 'MapKit',
    'Wwdc': 'WWDC',
    'LLVM': 'LLVM',
    'Arkit': 'ARKit',
    'Wkwebview': 'WKWebView',
    'Whats': "What's",
}

mode_map = {
    ENGLISH_MODE: stop_words,
    CHINESE_MODE: chinese_particles,
    JAPANESE_MODE: japanese_particles,
    ARABIC_MODE: arabic_stops,
}


def get_name(word):
    word = word.lower()
    for name, output in names.items():
        if name.lower() == word:
            return output


def is_roman_numeral(string):
    if len(string) == 0:
        return False
    # https://l.tat.sh/2HXEIyx
    m = re.match(r'^M{0,4}(CM|CD|D?C{0,3})(XC|XL|L?X{0,3})(IX|IV|V?I{0,3})$',
                 string, re.I)
    return m is not None


def fix_apostrophes(word):
    if "'" not in word:
        return word

    return re.sub(r"[A-Za-z]+('[A-Za-z]+)?",
                  lambda mo: mo.group(0)[0].upper() + mo.group(0)[1:].lower(),
                  word)


def lower_stop(words,
               modes=[ENGLISH_MODE],
               disable_names=False,
               ampersands=False):
    original_words = words.strip().split()
    words = words.strip().title().split()
    name = get_name(words[0])

    if name is not None:
        title = [name]
    elif words[0].upper() == original_words[0]:
        title = [fix_apostrophes(original_words[0])]
    else:
        title = [fix_apostrophes(words[0])]

    if is_roman_numeral(title[0]):
        title = [title[0].upper()]

    last_index = len(original_words) - 1
    ignore_roman = ['mix']

    for mode in modes:
        to_lower_case_array = mode_map[mode]
        index = 1
        for word in words[1:]:
            if disable_names is False:
                name = get_name(word)
                if name is not None:
                    try:
                        title[index] = name
                    except IndexError:
                        title.append(name)
                    index += 1
                    continue

            # Detect an upper-case word not to change
            if original_words[index] == word.upper() and \
                    not re.match(r'[^\w]', word):

                # Detect I (not Roman numeral necessarily)
                if mode == ENGLISH_MODE and word == 'I':
                    pass
                # ???
                elif index == last_index and \
                        re.match(r'[A-Z0-9]+', original_words[index]):
                    title.append(original_words[index])
                    continue

            begin = end = ''

            if re.match(r'^\W', word):
                begin = re.match(r'^(\W+)', word).groups()[0]
                word = word[1:]

            if re.match(r'\w+\W$', word):
                end = re.match(r'\w+(\W+)$', word).groups()[0]
                word = word[0:-1]

            if word.lower() in to_lower_case_array:
                word = words[index] = word.lower()

            if "'" in word:
                word = fix_apostrophes(word)

            # MIX is a roman numeral but is more typically used in a sequence
            # like 'Extended Mix', so do not capitalise it
            if is_roman_numeral(word) and word.lower() not in ignore_roman:
                word = word.upper()

            if mode == ENGLISH_MODE and word.lower() in english_abbrev:
                end = ''

            ordinal_match = re.match(english_ordinal_regex, word, flags=re.I)
            if mode == ENGLISH_MODE and ordinal_match is not None:
                word = '%s%s' % (
                    ordinal_match.group(1),
                    ordinal_match.group(2).lower(),
                )

            word = '%s%s%s' % (begin, word, end)

            try:
                title[index] = word
            except IndexError:
                title.append(word)

            index += 1

    title = ' '.join(title)

    if ampersands:
        title = title.replace(' and ', ' & ')

    return title


if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        description='Title fixer for various '
        'languages. Defaults to English mode. If any '
        'option is specified without -e, English mode'
        ' is disabled.')
    parser.add_argument('titles',
                        metavar='TITLE',
                        type=argparse.FileType('r'),
                        default=sys.stdin,
                        nargs='?',
                        help='Titles to process')
    parser.add_argument('-e',
                        dest='mode',
                        action='append_const',
                        const=ENGLISH_MODE,
                        help='Enable English mode')
    parser.add_argument('-c',
                        dest='mode',
                        action='append_const',
                        const=CHINESE_MODE,
                        help='Enable Chinese mode')
    parser.add_argument('-j',
                        dest='mode',
                        action='append_const',
                        const=JAPANESE_MODE,
                        help='Enable Japanese mode')
    parser.add_argument('-a',
                        dest='mode',
                        action='append_const',
                        const=ARABIC_MODE,
                        help='Enable Arabic mode')
    parser.add_argument('--no-names',
                        action='store_true',
                        help='Disable name checking',
                        dest='no_names',
                        default=False)
    parser.add_argument('-s',
                        '--ampersands',
                        action='store_true',
                        help='Replace " and " with " & "',
                        default=False)
    args = parser.parse_args()

    if args.mode is None:
        args.mode = [ENGLISH_MODE]

    for title in args.titles:
        print(
            lower_stop(title,
                       args.mode,
                       args.no_names,
                       ampersands=args.ampersands))
