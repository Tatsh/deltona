#!/usr/bin/env python
from os.path import basename
from typing import Optional
import argparse
import logging
import plistlib
import re
import subprocess as sp
import sys

KEY_WHEREFROMS = 'com.apple.metadata:kMDItemWhereFroms'
log: Optional[logging.Logger] = None


def setup_logging_stdout(name: Optional[str] = None,
                         verbose: bool = False) -> None:
    global log
    name = name if name else basename(sys.argv[0])
    log = logging.getLogger(name)
    log.setLevel(logging.DEBUG if verbose else logging.INFO)
    channel = logging.StreamHandler(sys.stdout)
    channel.setFormatter(logging.Formatter('%(message)s'))
    channel.setLevel(logging.DEBUG if verbose else logging.INFO)
    log.addHandler(channel)


def hexstr2bytes(s: str) -> bytes:
    def chunks(l, n):
        for i in range(0, len(l), n):
            yield l[i:i + n]

    def hexstr2bytes_generator(s: str):
        for h in chunks(s, 2):
            yield int(h, 16)

    return bytes(hexstr2bytes_generator(s))


def xattr(key, filename) -> str:
    return re.sub(
        r'\s+', '',
        sp.run(('xattr', '-p', key, filename),
               encoding='utf-8',
               stdout=sp.PIPE).stdout)


def main():
    parser = argparse.ArgumentParser(
        description='Determine where downloaded files came from.')
    parser.add_argument('files',
                        metavar='FILE',
                        nargs='+',
                        help='Files to process.')
    parser.add_argument('-w',
                        '--webpage',
                        action='store_true',
                        help='Print the webpage URL')
    args = parser.parse_args()
    setup_logging_stdout()
    assert log is not None
    has_multiple = len(args.files) > 1
    index = 1 if args.webpage else 0
    ret = 0
    arg: str
    for arg in args.files:
        try:
            val: str = plistlib.loads(hexstr2bytes(xattr(KEY_WHEREFROMS,
                                                         arg)))[index]
            if has_multiple:
                sys.stdout.write(f'{arg}: ')
            sys.stdout.write(f'{val}\n')
        except Exception as e:
            clz = str(type(e))[8:-2]
            log.exception('%s: %s', clz, exc_info=e)
            ret = 1
        except KeyboardInterrupt:
            return 1
    return ret


if __name__ == '__main__':
    sys.exit(main())
