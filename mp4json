#!/usr/bin/env python
from base64 import standard_b64encode
from datetime import datetime
from os import unlink as rm, utime
from os.path import splitext
from shutil import copyfile
from typing import Any, AnyStr, Sequence, TextIO, Union
import json
import re
import subprocess as sp
import sys

from typing_extensions import Final

CUSTOM_ATOM_NAME: Final = 'json'
MIMETYPE: Final = 'application/json'
TAG_DESCRIPTION: Final = 'youtube-dl metadata'
MP4BOX_REM_ITEM_CMD: Final = (
    'MP4Box',
    '-rem-item',
    '1',
    '',  # MP4 filename
)
# https://sourceforge.net/p/gpac/discussion/327349/thread/6d010474/
MP4BOX_SET_META_CMD: Final = (
    'MP4Box',
    '-set-meta',
    'mp21',
    '',  # MP4 filename
)
MP4BOX_WRITE_CMD_TEMPLATE: Final = (
    'MP4Box', '-add-item',
    ':name=youtube-dl metadata:mime=application/json:encoding=utf8', '')
ID3_TEXT_FRAME = 'TXXX'
ID3TED_REMOVE_FRAME_TEMPLATE: Final = (
    'id3ted',
    '--preserve-times',
    '--remove',
    ID3_TEXT_FRAME,
    '',  # MP3 filename
)
ID3TED_WRITE_CMD_TEMPLATE: Final = ('id3ted', '--preserve-times', '-3',
                                    '--TXXX', '', '')
UPLOAD_DATE_FORMAT = '%Y%m%d'


def quiet_subprocess_check_call(args: Sequence[str], **kwargs: Any) -> None:
    try:
        arg: Union[int, TextIO] = sp.DEVNULL
    except AttributeError:
        arg = open('/dev/null')
    kwargs.pop('check')
    kwargs['stdout'] = arg
    kwargs['stderr'] = arg
    sp.run(args, check=True, **kwargs)


def set_date(path: str, json_str: bytes) -> None:
    data: Final = json.loads(json_str.decode('utf-8'))
    try:
        upload_date: Final = data['upload_date']
    except KeyError:
        return
    if not isinstance(upload_date, str):
        return
    seconds = datetime.strptime(upload_date, UPLOAD_DATE_FORMAT).timestamp()
    utime(path, times=(seconds, seconds))


def mp4box_add_json(filename: str, json_filename: str) -> bool:
    cmd = list(MP4BOX_REM_ITEM_CMD)
    cmd[3] = filename
    try:
        quiet_subprocess_check_call(cmd)
    except sp.CalledProcessError:
        pass

    cmd = list(MP4BOX_SET_META_CMD)
    cmd[3] = filename
    quiet_subprocess_check_call(cmd)

    better_json_filename: Final = 'info.json'
    copyfile(json_filename, better_json_filename)

    cmd = list(MP4BOX_WRITE_CMD_TEMPLATE)
    cmd[2] = f'{better_json_filename}{cmd[2]}'
    cmd[3] = filename
    quiet_subprocess_check_call(cmd)

    rm(better_json_filename)
    with open(json_filename, 'rb') as f:
        set_date(filename, f.read())
    return True


def id3ted_add_json(filename: str, json_filename: str) -> bool:
    cmd = list(ID3TED_REMOVE_FRAME_TEMPLATE)
    cmd[-1] = filename
    quiet_subprocess_check_call(cmd)
    cmd = list(ID3TED_WRITE_CMD_TEMPLATE)
    with open(json_filename, 'rb') as f:
        new_json = f.read()
    encoded: Final = standard_b64encode(new_json).decode('utf-8')
    cmd[-2] = f'{encoded}:{TAG_DESCRIPTION}'
    cmd[-1] = filename
    quiet_subprocess_check_call(cmd)
    set_date(filename, new_json)
    return True


def isfile(path: Union[AnyStr, int]) -> bool:
    try:
        with open(path):
            pass
    except IOError:
        return False
    return True


def main() -> int:
    mp4_ext_regex: Final = re.compile(r'\.(?:mp4|m4[pabrv])$')
    mp3_ext_regex: Final = re.compile(r'\.mp3')
    for arg in sys.argv[1:]:
        json_filename = f'{splitext(arg)[0]}.info.json'
        if not isfile(json_filename):
            continue
        can_delete = False
        if re.search(mp4_ext_regex, arg):
            can_delete = mp4box_add_json(arg, json_filename)
        elif re.search(mp3_ext_regex, arg):
            can_delete = id3ted_add_json(arg, json_filename)
        if can_delete:
            rm(json_filename)
    return 0


if __name__ == '__main__':
    sys.exit(main())
