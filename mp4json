#!/usr/bin/env python
from __future__ import print_function
from base64 import standard_b64encode
from datetime import datetime
from enum import Enum, unique
from os import unlink as rm, utime
from os.path import splitext
try:
    from shlex import quote
except ImportError:
    from pipes import quote
from shutil import copyfile
import json
import re
import subprocess as sp
import sys

CUSTOM_ATOM_NAME = 'json'
MIMETYPE = 'application/json'

TAG_DESCRIPTION = 'youtube-dl metadata'
MP4BOX_REM_ITEM_CMD = [
    'MP4Box',
    '-rem-item',
    '1',
    None,  # MP4 filename
]
# https://sourceforge.net/p/gpac/discussion/327349/thread/6d010474/
MP4BOX_SET_META_CMD = [
    'MP4Box',
    '-set-meta',
    'mp21',
    None,  # MP4 filename
]
MP4BOX_WRITE_CMD_TEMPLATE = [
    'MP4Box',
    '-add-item',
    ':name=youtube-dl metadata:mime=application/json:encoding=utf8',
    None,
]
ID3_TEXT_FRAME = 'TXXX'
ID3TED_REMOVE_FRAME_TEMPLATE = [
    'id3ted',
    '--preserve-times',
    '--remove',
    ID3_TEXT_FRAME,
    None,  # MP3 filename
]
ID3TED_WRITE_CMD_TEMPLATE = [
    'id3ted',
    '--preserve-times',
    '-3',
    '--TXXX',
    None,
    None,
]
UPLOAD_DATE_FORMAT = '%Y%m%d'


@unique
class SubprocessKeywordArguments(Enum):
    standard_output = 'stdout'
    standard_error = 'stderr'


@unique
class StringEncodings(Enum):
    utf8 = 'utf-8'


@unique
class JSONDataKeys(Enum):
    upload_date = 'upload_date'


@unique
class FileModes(Enum):
    readonly_binary = 'rb'
    write_binary = 'wb'


def get_digest(func, s):
    h = func()
    h.update(s)
    return h.digest()


def quiet_subprocess_check_call(*args, **kwargs):
    try:
        arg = sp.DEVNULL
    except AttributeError:
        arg = open('/dev/null')
    kwargs[SubprocessKeywordArguments.standard_output.value] = arg
    kwargs[SubprocessKeywordArguments.standard_error.value] = arg
    sp.check_call(*args, **kwargs)


def set_date(path, json_str):
    data = json.loads(json_str.decode(StringEncodings.utf8.value))
    try:
        upload_date = data[JSONDataKeys.upload_date.value]
    except KeyError:
        return
    if not isinstance(upload_date, str):
        return
    seconds = datetime.strptime(upload_date, UPLOAD_DATE_FORMAT).timestamp()
    utime(
        path, times=(
            seconds,
            seconds,
        ))


def mp4box_add_json(filename, json_filename):
    cmd = list(MP4BOX_REM_ITEM_CMD)
    cmd[3] = filename
    try:
        quiet_subprocess_check_call(cmd)
    except sp.CalledProcessError:
        pass

    cmd = list(MP4BOX_SET_META_CMD)
    cmd[3] = filename
    quiet_subprocess_check_call(cmd)

    better_json_filename = 'info.json'
    copyfile(json_filename, better_json_filename)

    cmd = list(MP4BOX_WRITE_CMD_TEMPLATE)
    cmd[2] = '{}{}'.format(better_json_filename, cmd[2])
    cmd[3] = filename

    quiet_subprocess_check_call(cmd)
    rm(better_json_filename)
    with open(json_filename, 'rb') as f:
        set_date(filename, f.read())

    return True


def id3ted_add_json(filename, json_filename):
    cmd = list(ID3TED_REMOVE_FRAME_TEMPLATE)
    cmd[-1] = filename
    quiet_subprocess_check_call(cmd)

    cmd = list(ID3TED_WRITE_CMD_TEMPLATE)
    with open(json_filename, FileModes.readonly_binary.value) as f:
        new_json = f.read()

    encoded = standard_b64encode(new_json).decode(StringEncodings.utf8.value)
    cmd[-2] = '{}:{}'.format(encoded, TAG_DESCRIPTION)
    cmd[-1] = filename
    quiet_subprocess_check_call(cmd)
    set_date(filename, new_json)

    return True


def isfile(path):
    try:
        with open(path):
            pass
    except IOError:
        return False
    return True


if __name__ == '__main__':
    mp4_ext_regex = re.compile(r'\.(?:mp4|m4[pabrv])$')
    mp3_ext_regex = re.compile(r'\.mp3')

    for arg in sys.argv[1:]:
        json_filename = '{}.info.json'.format(splitext(arg)[0])
        if not isfile(json_filename):
            continue

        can_delete = False
        if re.search(mp4_ext_regex, arg):
            can_delete = mp4box_add_json(arg, json_filename)
        elif re.search(mp3_ext_regex, arg):
            can_delete = id3ted_add_json(arg, json_filename)

        if can_delete:
            rm(json_filename)
